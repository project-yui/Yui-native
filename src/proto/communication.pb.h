// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_communication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_communication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_communication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_communication_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_communication_2eproto;
namespace nt {
namespace communication {
class PokeReq;
struct PokeReqDefaultTypeInternal;
extern PokeReqDefaultTypeInternal _PokeReq_default_instance_;
class Property;
struct PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class Settings;
struct SettingsDefaultTypeInternal;
extern SettingsDefaultTypeInternal _Settings_default_instance_;
class StrangerSearchReq;
struct StrangerSearchReqDefaultTypeInternal;
extern StrangerSearchReqDefaultTypeInternal _StrangerSearchReq_default_instance_;
class StrangerSearchResp;
struct StrangerSearchRespDefaultTypeInternal;
extern StrangerSearchRespDefaultTypeInternal _StrangerSearchResp_default_instance_;
class StrangerSearchRespField1;
struct StrangerSearchRespField1DefaultTypeInternal;
extern StrangerSearchRespField1DefaultTypeInternal _StrangerSearchRespField1_default_instance_;
class TcpBase;
struct TcpBaseDefaultTypeInternal;
extern TcpBaseDefaultTypeInternal _TcpBase_default_instance_;
}  // namespace communication
}  // namespace nt
PROTOBUF_NAMESPACE_OPEN
template<> ::nt::communication::PokeReq* Arena::CreateMaybeMessage<::nt::communication::PokeReq>(Arena*);
template<> ::nt::communication::Property* Arena::CreateMaybeMessage<::nt::communication::Property>(Arena*);
template<> ::nt::communication::Settings* Arena::CreateMaybeMessage<::nt::communication::Settings>(Arena*);
template<> ::nt::communication::StrangerSearchReq* Arena::CreateMaybeMessage<::nt::communication::StrangerSearchReq>(Arena*);
template<> ::nt::communication::StrangerSearchResp* Arena::CreateMaybeMessage<::nt::communication::StrangerSearchResp>(Arena*);
template<> ::nt::communication::StrangerSearchRespField1* Arena::CreateMaybeMessage<::nt::communication::StrangerSearchRespField1>(Arena*);
template<> ::nt::communication::TcpBase* Arena::CreateMaybeMessage<::nt::communication::TcpBase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nt {
namespace communication {

// ===================================================================

class TcpBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nt.communication.TcpBase) */ {
 public:
  inline TcpBase() : TcpBase(nullptr) {}
  ~TcpBase() override;
  explicit PROTOBUF_CONSTEXPR TcpBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TcpBase(const TcpBase& from);
  TcpBase(TcpBase&& from) noexcept
    : TcpBase() {
    *this = ::std::move(from);
  }

  inline TcpBase& operator=(const TcpBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TcpBase& operator=(TcpBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TcpBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const TcpBase* internal_default_instance() {
    return reinterpret_cast<const TcpBase*>(
               &_TcpBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TcpBase& a, TcpBase& b) {
    a.Swap(&b);
  }
  inline void Swap(TcpBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TcpBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TcpBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TcpBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TcpBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TcpBase& from) {
    TcpBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TcpBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nt.communication.TcpBase";
  }
  protected:
  explicit TcpBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 11,
    kBodyFieldNumber = 4,
    kErrorMsgFieldNumber = 5,
    kCommandFieldNumber = 1,
    kSubCommandFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
    kReservedFieldNumber = 12,
  };
  // repeated .nt.communication.Property properties = 11;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::nt::communication::Property* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nt::communication::Property >*
      mutable_properties();
  private:
  const ::nt::communication::Property& _internal_properties(int index) const;
  ::nt::communication::Property* _internal_add_properties();
  public:
  const ::nt::communication::Property& properties(int index) const;
  ::nt::communication::Property* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nt::communication::Property >&
      properties() const;

  // bytes body = 4;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional string errorMsg = 5;
  bool has_errormsg() const;
  private:
  bool _internal_has_errormsg() const;
  public:
  void clear_errormsg();
  const std::string& errormsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormsg();
  PROTOBUF_NODISCARD std::string* release_errormsg();
  void set_allocated_errormsg(std::string* errormsg);
  private:
  const std::string& _internal_errormsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormsg(const std::string& value);
  std::string* _internal_mutable_errormsg();
  public:

  // int32 command = 1;
  void clear_command();
  int32_t command() const;
  void set_command(int32_t value);
  private:
  int32_t _internal_command() const;
  void _internal_set_command(int32_t value);
  public:

  // int32 subCommand = 2;
  void clear_subcommand();
  int32_t subcommand() const;
  void set_subcommand(int32_t value);
  private:
  int32_t _internal_subcommand() const;
  void _internal_set_subcommand(int32_t value);
  public:

  // optional int32 errorCode = 3;
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  int32_t errorcode() const;
  void set_errorcode(int32_t value);
  private:
  int32_t _internal_errorcode() const;
  void _internal_set_errorcode(int32_t value);
  public:

  // int32 reserved = 12;
  void clear_reserved();
  int32_t reserved() const;
  void set_reserved(int32_t value);
  private:
  int32_t _internal_reserved() const;
  void _internal_set_reserved(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:nt.communication.TcpBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nt::communication::Property > properties_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormsg_;
    int32_t command_;
    int32_t subcommand_;
    int32_t errorcode_;
    int32_t reserved_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Property final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nt.communication.Property) */ {
 public:
  inline Property() : Property(nullptr) {}
  ~Property() override;
  explicit PROTOBUF_CONSTEXPR Property(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Property(const Property& from);
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property& operator=(Property&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Property& default_instance() {
    return *internal_default_instance();
  }
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }
  inline void Swap(Property* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Property* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Property>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Property& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Property& from) {
    Property::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nt.communication.Property";
  }
  protected:
  explicit Property(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:nt.communication.Property)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class PokeReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nt.communication.PokeReq) */ {
 public:
  inline PokeReq() : PokeReq(nullptr) {}
  ~PokeReq() override;
  explicit PROTOBUF_CONSTEXPR PokeReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PokeReq(const PokeReq& from);
  PokeReq(PokeReq&& from) noexcept
    : PokeReq() {
    *this = ::std::move(from);
  }

  inline PokeReq& operator=(const PokeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PokeReq& operator=(PokeReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PokeReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PokeReq* internal_default_instance() {
    return reinterpret_cast<const PokeReq*>(
               &_PokeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PokeReq& a, PokeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PokeReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PokeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PokeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PokeReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PokeReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PokeReq& from) {
    PokeReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PokeReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nt.communication.PokeReq";
  }
  protected:
  explicit PokeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUinFieldNumber = 1,
    kGroupUinFieldNumber = 2,
    kFriendUinFieldNumber = 5,
    kExtFieldNumber = 6,
  };
  // uint32 uin = 1;
  void clear_uin();
  uint32_t uin() const;
  void set_uin(uint32_t value);
  private:
  uint32_t _internal_uin() const;
  void _internal_set_uin(uint32_t value);
  public:

  // optional uint32 groupUin = 2;
  bool has_groupuin() const;
  private:
  bool _internal_has_groupuin() const;
  public:
  void clear_groupuin();
  uint32_t groupuin() const;
  void set_groupuin(uint32_t value);
  private:
  uint32_t _internal_groupuin() const;
  void _internal_set_groupuin(uint32_t value);
  public:

  // optional uint32 friendUin = 5;
  bool has_frienduin() const;
  private:
  bool _internal_has_frienduin() const;
  public:
  void clear_frienduin();
  uint32_t frienduin() const;
  void set_frienduin(uint32_t value);
  private:
  uint32_t _internal_frienduin() const;
  void _internal_set_frienduin(uint32_t value);
  public:

  // uint32 Ext = 6;
  void clear_ext();
  uint32_t ext() const;
  void set_ext(uint32_t value);
  private:
  uint32_t _internal_ext() const;
  void _internal_set_ext(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:nt.communication.PokeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t uin_;
    uint32_t groupuin_;
    uint32_t frienduin_;
    uint32_t ext_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class StrangerSearchReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nt.communication.StrangerSearchReq) */ {
 public:
  inline StrangerSearchReq() : StrangerSearchReq(nullptr) {}
  ~StrangerSearchReq() override;
  explicit PROTOBUF_CONSTEXPR StrangerSearchReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StrangerSearchReq(const StrangerSearchReq& from);
  StrangerSearchReq(StrangerSearchReq&& from) noexcept
    : StrangerSearchReq() {
    *this = ::std::move(from);
  }

  inline StrangerSearchReq& operator=(const StrangerSearchReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrangerSearchReq& operator=(StrangerSearchReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StrangerSearchReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const StrangerSearchReq* internal_default_instance() {
    return reinterpret_cast<const StrangerSearchReq*>(
               &_StrangerSearchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StrangerSearchReq& a, StrangerSearchReq& b) {
    a.Swap(&b);
  }
  inline void Swap(StrangerSearchReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StrangerSearchReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StrangerSearchReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StrangerSearchReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StrangerSearchReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StrangerSearchReq& from) {
    StrangerSearchReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StrangerSearchReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nt.communication.StrangerSearchReq";
  }
  protected:
  explicit StrangerSearchReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetUinFieldNumber = 1,
    kSettingsFieldNumber = 3,
  };
  // string targetUin = 1;
  void clear_targetuin();
  const std::string& targetuin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetuin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetuin();
  PROTOBUF_NODISCARD std::string* release_targetuin();
  void set_allocated_targetuin(std::string* targetuin);
  private:
  const std::string& _internal_targetuin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetuin(const std::string& value);
  std::string* _internal_mutable_targetuin();
  public:

  // .nt.communication.Settings settings = 3;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::nt::communication::Settings& settings() const;
  PROTOBUF_NODISCARD ::nt::communication::Settings* release_settings();
  ::nt::communication::Settings* mutable_settings();
  void set_allocated_settings(::nt::communication::Settings* settings);
  private:
  const ::nt::communication::Settings& _internal_settings() const;
  ::nt::communication::Settings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::nt::communication::Settings* settings);
  ::nt::communication::Settings* unsafe_arena_release_settings();

  // @@protoc_insertion_point(class_scope:nt.communication.StrangerSearchReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetuin_;
    ::nt::communication::Settings* settings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Settings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nt.communication.Settings) */ {
 public:
  inline Settings() : Settings(nullptr) {}
  ~Settings() override;
  explicit PROTOBUF_CONSTEXPR Settings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Settings(const Settings& from);
  Settings(Settings&& from) noexcept
    : Settings() {
    *this = ::std::move(from);
  }

  inline Settings& operator=(const Settings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Settings& operator=(Settings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Settings& default_instance() {
    return *internal_default_instance();
  }
  static inline const Settings* internal_default_instance() {
    return reinterpret_cast<const Settings*>(
               &_Settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Settings& a, Settings& b) {
    a.Swap(&b);
  }
  inline void Swap(Settings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Settings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Settings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Settings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Settings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Settings& from) {
    Settings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Settings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nt.communication.Settings";
  }
  protected:
  explicit Settings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiled11FieldNumber = 11,
    kSettingFieldNumber = 55,
    kFiled4FieldNumber = 4,
  };
  // string filed11 = 11;
  void clear_filed11();
  const std::string& filed11() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filed11(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filed11();
  PROTOBUF_NODISCARD std::string* release_filed11();
  void set_allocated_filed11(std::string* filed11);
  private:
  const std::string& _internal_filed11() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filed11(const std::string& value);
  std::string* _internal_mutable_filed11();
  public:

  // string setting = 55;
  void clear_setting();
  const std::string& setting() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_setting(ArgT0&& arg0, ArgT... args);
  std::string* mutable_setting();
  PROTOBUF_NODISCARD std::string* release_setting();
  void set_allocated_setting(std::string* setting);
  private:
  const std::string& _internal_setting() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_setting(const std::string& value);
  std::string* _internal_mutable_setting();
  public:

  // uint32 filed4 = 4;
  void clear_filed4();
  uint32_t filed4() const;
  void set_filed4(uint32_t value);
  private:
  uint32_t _internal_filed4() const;
  void _internal_set_filed4(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:nt.communication.Settings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filed11_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setting_;
    uint32_t filed4_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class StrangerSearchResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nt.communication.StrangerSearchResp) */ {
 public:
  inline StrangerSearchResp() : StrangerSearchResp(nullptr) {}
  ~StrangerSearchResp() override;
  explicit PROTOBUF_CONSTEXPR StrangerSearchResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StrangerSearchResp(const StrangerSearchResp& from);
  StrangerSearchResp(StrangerSearchResp&& from) noexcept
    : StrangerSearchResp() {
    *this = ::std::move(from);
  }

  inline StrangerSearchResp& operator=(const StrangerSearchResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrangerSearchResp& operator=(StrangerSearchResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StrangerSearchResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const StrangerSearchResp* internal_default_instance() {
    return reinterpret_cast<const StrangerSearchResp*>(
               &_StrangerSearchResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StrangerSearchResp& a, StrangerSearchResp& b) {
    a.Swap(&b);
  }
  inline void Swap(StrangerSearchResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StrangerSearchResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StrangerSearchResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StrangerSearchResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StrangerSearchResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StrangerSearchResp& from) {
    StrangerSearchResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StrangerSearchResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nt.communication.StrangerSearchResp";
  }
  protected:
  explicit StrangerSearchResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kField3FieldNumber = 3,
    kField1FieldNumber = 1,
    kField2FieldNumber = 2,
  };
  // bytes field3 = 3;
  void clear_field3();
  const std::string& field3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field3();
  PROTOBUF_NODISCARD std::string* release_field3();
  void set_allocated_field3(std::string* field3);
  private:
  const std::string& _internal_field3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field3(const std::string& value);
  std::string* _internal_mutable_field3();
  public:

  // .nt.communication.StrangerSearchRespField1 field1 = 1;
  bool has_field1() const;
  private:
  bool _internal_has_field1() const;
  public:
  void clear_field1();
  const ::nt::communication::StrangerSearchRespField1& field1() const;
  PROTOBUF_NODISCARD ::nt::communication::StrangerSearchRespField1* release_field1();
  ::nt::communication::StrangerSearchRespField1* mutable_field1();
  void set_allocated_field1(::nt::communication::StrangerSearchRespField1* field1);
  private:
  const ::nt::communication::StrangerSearchRespField1& _internal_field1() const;
  ::nt::communication::StrangerSearchRespField1* _internal_mutable_field1();
  public:
  void unsafe_arena_set_allocated_field1(
      ::nt::communication::StrangerSearchRespField1* field1);
  ::nt::communication::StrangerSearchRespField1* unsafe_arena_release_field1();

  // optional int32 field2 = 2;
  bool has_field2() const;
  private:
  bool _internal_has_field2() const;
  public:
  void clear_field2();
  int32_t field2() const;
  void set_field2(int32_t value);
  private:
  int32_t _internal_field2() const;
  void _internal_set_field2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:nt.communication.StrangerSearchResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field3_;
    ::nt::communication::StrangerSearchRespField1* field1_;
    int32_t field2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class StrangerSearchRespField1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nt.communication.StrangerSearchRespField1) */ {
 public:
  inline StrangerSearchRespField1() : StrangerSearchRespField1(nullptr) {}
  ~StrangerSearchRespField1() override;
  explicit PROTOBUF_CONSTEXPR StrangerSearchRespField1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StrangerSearchRespField1(const StrangerSearchRespField1& from);
  StrangerSearchRespField1(StrangerSearchRespField1&& from) noexcept
    : StrangerSearchRespField1() {
    *this = ::std::move(from);
  }

  inline StrangerSearchRespField1& operator=(const StrangerSearchRespField1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrangerSearchRespField1& operator=(StrangerSearchRespField1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StrangerSearchRespField1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StrangerSearchRespField1* internal_default_instance() {
    return reinterpret_cast<const StrangerSearchRespField1*>(
               &_StrangerSearchRespField1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StrangerSearchRespField1& a, StrangerSearchRespField1& b) {
    a.Swap(&b);
  }
  inline void Swap(StrangerSearchRespField1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StrangerSearchRespField1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StrangerSearchRespField1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StrangerSearchRespField1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StrangerSearchRespField1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StrangerSearchRespField1& from) {
    StrangerSearchRespField1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StrangerSearchRespField1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nt.communication.StrangerSearchRespField1";
  }
  protected:
  explicit StrangerSearchRespField1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kField2FieldNumber = 2,
    kField1FieldNumber = 1,
    kField4FieldNumber = 4,
  };
  // string field2 = 2;
  void clear_field2();
  const std::string& field2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field2();
  PROTOBUF_NODISCARD std::string* release_field2();
  void set_allocated_field2(std::string* field2);
  private:
  const std::string& _internal_field2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field2(const std::string& value);
  std::string* _internal_mutable_field2();
  public:

  // int32 field1 = 1;
  void clear_field1();
  int32_t field1() const;
  void set_field1(int32_t value);
  private:
  int32_t _internal_field1() const;
  void _internal_set_field1(int32_t value);
  public:

  // optional int32 field4 = 4;
  bool has_field4() const;
  private:
  bool _internal_has_field4() const;
  public:
  void clear_field4();
  int32_t field4() const;
  void set_field4(int32_t value);
  private:
  int32_t _internal_field4() const;
  void _internal_set_field4(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:nt.communication.StrangerSearchRespField1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field2_;
    int32_t field1_;
    int32_t field4_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TcpBase

// int32 command = 1;
inline void TcpBase::clear_command() {
  _impl_.command_ = 0;
}
inline int32_t TcpBase::_internal_command() const {
  return _impl_.command_;
}
inline int32_t TcpBase::command() const {
  // @@protoc_insertion_point(field_get:nt.communication.TcpBase.command)
  return _internal_command();
}
inline void TcpBase::_internal_set_command(int32_t value) {
  
  _impl_.command_ = value;
}
inline void TcpBase::set_command(int32_t value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:nt.communication.TcpBase.command)
}

// int32 subCommand = 2;
inline void TcpBase::clear_subcommand() {
  _impl_.subcommand_ = 0;
}
inline int32_t TcpBase::_internal_subcommand() const {
  return _impl_.subcommand_;
}
inline int32_t TcpBase::subcommand() const {
  // @@protoc_insertion_point(field_get:nt.communication.TcpBase.subCommand)
  return _internal_subcommand();
}
inline void TcpBase::_internal_set_subcommand(int32_t value) {
  
  _impl_.subcommand_ = value;
}
inline void TcpBase::set_subcommand(int32_t value) {
  _internal_set_subcommand(value);
  // @@protoc_insertion_point(field_set:nt.communication.TcpBase.subCommand)
}

// optional int32 errorCode = 3;
inline bool TcpBase::_internal_has_errorcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TcpBase::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void TcpBase::clear_errorcode() {
  _impl_.errorcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t TcpBase::_internal_errorcode() const {
  return _impl_.errorcode_;
}
inline int32_t TcpBase::errorcode() const {
  // @@protoc_insertion_point(field_get:nt.communication.TcpBase.errorCode)
  return _internal_errorcode();
}
inline void TcpBase::_internal_set_errorcode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.errorcode_ = value;
}
inline void TcpBase::set_errorcode(int32_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:nt.communication.TcpBase.errorCode)
}

// bytes body = 4;
inline void TcpBase::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& TcpBase::body() const {
  // @@protoc_insertion_point(field_get:nt.communication.TcpBase.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TcpBase::set_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt.communication.TcpBase.body)
}
inline std::string* TcpBase::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:nt.communication.TcpBase.body)
  return _s;
}
inline const std::string& TcpBase::_internal_body() const {
  return _impl_.body_.Get();
}
inline void TcpBase::_internal_set_body(const std::string& value) {
  
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* TcpBase::_internal_mutable_body() {
  
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* TcpBase::release_body() {
  // @@protoc_insertion_point(field_release:nt.communication.TcpBase.body)
  return _impl_.body_.Release();
}
inline void TcpBase::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt.communication.TcpBase.body)
}

// optional string errorMsg = 5;
inline bool TcpBase::_internal_has_errormsg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TcpBase::has_errormsg() const {
  return _internal_has_errormsg();
}
inline void TcpBase::clear_errormsg() {
  _impl_.errormsg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TcpBase::errormsg() const {
  // @@protoc_insertion_point(field_get:nt.communication.TcpBase.errorMsg)
  return _internal_errormsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TcpBase::set_errormsg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.errormsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt.communication.TcpBase.errorMsg)
}
inline std::string* TcpBase::mutable_errormsg() {
  std::string* _s = _internal_mutable_errormsg();
  // @@protoc_insertion_point(field_mutable:nt.communication.TcpBase.errorMsg)
  return _s;
}
inline const std::string& TcpBase::_internal_errormsg() const {
  return _impl_.errormsg_.Get();
}
inline void TcpBase::_internal_set_errormsg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errormsg_.Set(value, GetArenaForAllocation());
}
inline std::string* TcpBase::_internal_mutable_errormsg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.errormsg_.Mutable(GetArenaForAllocation());
}
inline std::string* TcpBase::release_errormsg() {
  // @@protoc_insertion_point(field_release:nt.communication.TcpBase.errorMsg)
  if (!_internal_has_errormsg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.errormsg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormsg_.IsDefault()) {
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TcpBase::set_allocated_errormsg(std::string* errormsg) {
  if (errormsg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.errormsg_.SetAllocated(errormsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormsg_.IsDefault()) {
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt.communication.TcpBase.errorMsg)
}

// repeated .nt.communication.Property properties = 11;
inline int TcpBase::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int TcpBase::properties_size() const {
  return _internal_properties_size();
}
inline void TcpBase::clear_properties() {
  _impl_.properties_.Clear();
}
inline ::nt::communication::Property* TcpBase::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:nt.communication.TcpBase.properties)
  return _impl_.properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nt::communication::Property >*
TcpBase::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:nt.communication.TcpBase.properties)
  return &_impl_.properties_;
}
inline const ::nt::communication::Property& TcpBase::_internal_properties(int index) const {
  return _impl_.properties_.Get(index);
}
inline const ::nt::communication::Property& TcpBase::properties(int index) const {
  // @@protoc_insertion_point(field_get:nt.communication.TcpBase.properties)
  return _internal_properties(index);
}
inline ::nt::communication::Property* TcpBase::_internal_add_properties() {
  return _impl_.properties_.Add();
}
inline ::nt::communication::Property* TcpBase::add_properties() {
  ::nt::communication::Property* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:nt.communication.TcpBase.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nt::communication::Property >&
TcpBase::properties() const {
  // @@protoc_insertion_point(field_list:nt.communication.TcpBase.properties)
  return _impl_.properties_;
}

// int32 reserved = 12;
inline void TcpBase::clear_reserved() {
  _impl_.reserved_ = 0;
}
inline int32_t TcpBase::_internal_reserved() const {
  return _impl_.reserved_;
}
inline int32_t TcpBase::reserved() const {
  // @@protoc_insertion_point(field_get:nt.communication.TcpBase.reserved)
  return _internal_reserved();
}
inline void TcpBase::_internal_set_reserved(int32_t value) {
  
  _impl_.reserved_ = value;
}
inline void TcpBase::set_reserved(int32_t value) {
  _internal_set_reserved(value);
  // @@protoc_insertion_point(field_set:nt.communication.TcpBase.reserved)
}

// -------------------------------------------------------------------

// Property

// string key = 1;
inline void Property::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Property::key() const {
  // @@protoc_insertion_point(field_get:nt.communication.Property.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Property::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt.communication.Property.key)
}
inline std::string* Property::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:nt.communication.Property.key)
  return _s;
}
inline const std::string& Property::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Property::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Property::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* Property::release_key() {
  // @@protoc_insertion_point(field_release:nt.communication.Property.key)
  return _impl_.key_.Release();
}
inline void Property::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt.communication.Property.key)
}

// bytes value = 2;
inline void Property::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Property::value() const {
  // @@protoc_insertion_point(field_get:nt.communication.Property.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Property::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt.communication.Property.value)
}
inline std::string* Property::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:nt.communication.Property.value)
  return _s;
}
inline const std::string& Property::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Property::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Property::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* Property::release_value() {
  // @@protoc_insertion_point(field_release:nt.communication.Property.value)
  return _impl_.value_.Release();
}
inline void Property::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt.communication.Property.value)
}

// -------------------------------------------------------------------

// PokeReq

// uint32 uin = 1;
inline void PokeReq::clear_uin() {
  _impl_.uin_ = 0u;
}
inline uint32_t PokeReq::_internal_uin() const {
  return _impl_.uin_;
}
inline uint32_t PokeReq::uin() const {
  // @@protoc_insertion_point(field_get:nt.communication.PokeReq.uin)
  return _internal_uin();
}
inline void PokeReq::_internal_set_uin(uint32_t value) {
  
  _impl_.uin_ = value;
}
inline void PokeReq::set_uin(uint32_t value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:nt.communication.PokeReq.uin)
}

// optional uint32 groupUin = 2;
inline bool PokeReq::_internal_has_groupuin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PokeReq::has_groupuin() const {
  return _internal_has_groupuin();
}
inline void PokeReq::clear_groupuin() {
  _impl_.groupuin_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t PokeReq::_internal_groupuin() const {
  return _impl_.groupuin_;
}
inline uint32_t PokeReq::groupuin() const {
  // @@protoc_insertion_point(field_get:nt.communication.PokeReq.groupUin)
  return _internal_groupuin();
}
inline void PokeReq::_internal_set_groupuin(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.groupuin_ = value;
}
inline void PokeReq::set_groupuin(uint32_t value) {
  _internal_set_groupuin(value);
  // @@protoc_insertion_point(field_set:nt.communication.PokeReq.groupUin)
}

// optional uint32 friendUin = 5;
inline bool PokeReq::_internal_has_frienduin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PokeReq::has_frienduin() const {
  return _internal_has_frienduin();
}
inline void PokeReq::clear_frienduin() {
  _impl_.frienduin_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PokeReq::_internal_frienduin() const {
  return _impl_.frienduin_;
}
inline uint32_t PokeReq::frienduin() const {
  // @@protoc_insertion_point(field_get:nt.communication.PokeReq.friendUin)
  return _internal_frienduin();
}
inline void PokeReq::_internal_set_frienduin(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.frienduin_ = value;
}
inline void PokeReq::set_frienduin(uint32_t value) {
  _internal_set_frienduin(value);
  // @@protoc_insertion_point(field_set:nt.communication.PokeReq.friendUin)
}

// uint32 Ext = 6;
inline void PokeReq::clear_ext() {
  _impl_.ext_ = 0u;
}
inline uint32_t PokeReq::_internal_ext() const {
  return _impl_.ext_;
}
inline uint32_t PokeReq::ext() const {
  // @@protoc_insertion_point(field_get:nt.communication.PokeReq.Ext)
  return _internal_ext();
}
inline void PokeReq::_internal_set_ext(uint32_t value) {
  
  _impl_.ext_ = value;
}
inline void PokeReq::set_ext(uint32_t value) {
  _internal_set_ext(value);
  // @@protoc_insertion_point(field_set:nt.communication.PokeReq.Ext)
}

// -------------------------------------------------------------------

// StrangerSearchReq

// string targetUin = 1;
inline void StrangerSearchReq::clear_targetuin() {
  _impl_.targetuin_.ClearToEmpty();
}
inline const std::string& StrangerSearchReq::targetuin() const {
  // @@protoc_insertion_point(field_get:nt.communication.StrangerSearchReq.targetUin)
  return _internal_targetuin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StrangerSearchReq::set_targetuin(ArgT0&& arg0, ArgT... args) {
 
 _impl_.targetuin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt.communication.StrangerSearchReq.targetUin)
}
inline std::string* StrangerSearchReq::mutable_targetuin() {
  std::string* _s = _internal_mutable_targetuin();
  // @@protoc_insertion_point(field_mutable:nt.communication.StrangerSearchReq.targetUin)
  return _s;
}
inline const std::string& StrangerSearchReq::_internal_targetuin() const {
  return _impl_.targetuin_.Get();
}
inline void StrangerSearchReq::_internal_set_targetuin(const std::string& value) {
  
  _impl_.targetuin_.Set(value, GetArenaForAllocation());
}
inline std::string* StrangerSearchReq::_internal_mutable_targetuin() {
  
  return _impl_.targetuin_.Mutable(GetArenaForAllocation());
}
inline std::string* StrangerSearchReq::release_targetuin() {
  // @@protoc_insertion_point(field_release:nt.communication.StrangerSearchReq.targetUin)
  return _impl_.targetuin_.Release();
}
inline void StrangerSearchReq::set_allocated_targetuin(std::string* targetuin) {
  if (targetuin != nullptr) {
    
  } else {
    
  }
  _impl_.targetuin_.SetAllocated(targetuin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.targetuin_.IsDefault()) {
    _impl_.targetuin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt.communication.StrangerSearchReq.targetUin)
}

// .nt.communication.Settings settings = 3;
inline bool StrangerSearchReq::_internal_has_settings() const {
  return this != internal_default_instance() && _impl_.settings_ != nullptr;
}
inline bool StrangerSearchReq::has_settings() const {
  return _internal_has_settings();
}
inline void StrangerSearchReq::clear_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.settings_ != nullptr) {
    delete _impl_.settings_;
  }
  _impl_.settings_ = nullptr;
}
inline const ::nt::communication::Settings& StrangerSearchReq::_internal_settings() const {
  const ::nt::communication::Settings* p = _impl_.settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::nt::communication::Settings&>(
      ::nt::communication::_Settings_default_instance_);
}
inline const ::nt::communication::Settings& StrangerSearchReq::settings() const {
  // @@protoc_insertion_point(field_get:nt.communication.StrangerSearchReq.settings)
  return _internal_settings();
}
inline void StrangerSearchReq::unsafe_arena_set_allocated_settings(
    ::nt::communication::Settings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settings_);
  }
  _impl_.settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nt.communication.StrangerSearchReq.settings)
}
inline ::nt::communication::Settings* StrangerSearchReq::release_settings() {
  
  ::nt::communication::Settings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nt::communication::Settings* StrangerSearchReq::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:nt.communication.StrangerSearchReq.settings)
  
  ::nt::communication::Settings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
  return temp;
}
inline ::nt::communication::Settings* StrangerSearchReq::_internal_mutable_settings() {
  
  if (_impl_.settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::nt::communication::Settings>(GetArenaForAllocation());
    _impl_.settings_ = p;
  }
  return _impl_.settings_;
}
inline ::nt::communication::Settings* StrangerSearchReq::mutable_settings() {
  ::nt::communication::Settings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:nt.communication.StrangerSearchReq.settings)
  return _msg;
}
inline void StrangerSearchReq::set_allocated_settings(::nt::communication::Settings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:nt.communication.StrangerSearchReq.settings)
}

// -------------------------------------------------------------------

// Settings

// uint32 filed4 = 4;
inline void Settings::clear_filed4() {
  _impl_.filed4_ = 0u;
}
inline uint32_t Settings::_internal_filed4() const {
  return _impl_.filed4_;
}
inline uint32_t Settings::filed4() const {
  // @@protoc_insertion_point(field_get:nt.communication.Settings.filed4)
  return _internal_filed4();
}
inline void Settings::_internal_set_filed4(uint32_t value) {
  
  _impl_.filed4_ = value;
}
inline void Settings::set_filed4(uint32_t value) {
  _internal_set_filed4(value);
  // @@protoc_insertion_point(field_set:nt.communication.Settings.filed4)
}

// string filed11 = 11;
inline void Settings::clear_filed11() {
  _impl_.filed11_.ClearToEmpty();
}
inline const std::string& Settings::filed11() const {
  // @@protoc_insertion_point(field_get:nt.communication.Settings.filed11)
  return _internal_filed11();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Settings::set_filed11(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filed11_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt.communication.Settings.filed11)
}
inline std::string* Settings::mutable_filed11() {
  std::string* _s = _internal_mutable_filed11();
  // @@protoc_insertion_point(field_mutable:nt.communication.Settings.filed11)
  return _s;
}
inline const std::string& Settings::_internal_filed11() const {
  return _impl_.filed11_.Get();
}
inline void Settings::_internal_set_filed11(const std::string& value) {
  
  _impl_.filed11_.Set(value, GetArenaForAllocation());
}
inline std::string* Settings::_internal_mutable_filed11() {
  
  return _impl_.filed11_.Mutable(GetArenaForAllocation());
}
inline std::string* Settings::release_filed11() {
  // @@protoc_insertion_point(field_release:nt.communication.Settings.filed11)
  return _impl_.filed11_.Release();
}
inline void Settings::set_allocated_filed11(std::string* filed11) {
  if (filed11 != nullptr) {
    
  } else {
    
  }
  _impl_.filed11_.SetAllocated(filed11, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filed11_.IsDefault()) {
    _impl_.filed11_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt.communication.Settings.filed11)
}

// string setting = 55;
inline void Settings::clear_setting() {
  _impl_.setting_.ClearToEmpty();
}
inline const std::string& Settings::setting() const {
  // @@protoc_insertion_point(field_get:nt.communication.Settings.setting)
  return _internal_setting();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Settings::set_setting(ArgT0&& arg0, ArgT... args) {
 
 _impl_.setting_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt.communication.Settings.setting)
}
inline std::string* Settings::mutable_setting() {
  std::string* _s = _internal_mutable_setting();
  // @@protoc_insertion_point(field_mutable:nt.communication.Settings.setting)
  return _s;
}
inline const std::string& Settings::_internal_setting() const {
  return _impl_.setting_.Get();
}
inline void Settings::_internal_set_setting(const std::string& value) {
  
  _impl_.setting_.Set(value, GetArenaForAllocation());
}
inline std::string* Settings::_internal_mutable_setting() {
  
  return _impl_.setting_.Mutable(GetArenaForAllocation());
}
inline std::string* Settings::release_setting() {
  // @@protoc_insertion_point(field_release:nt.communication.Settings.setting)
  return _impl_.setting_.Release();
}
inline void Settings::set_allocated_setting(std::string* setting) {
  if (setting != nullptr) {
    
  } else {
    
  }
  _impl_.setting_.SetAllocated(setting, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.setting_.IsDefault()) {
    _impl_.setting_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt.communication.Settings.setting)
}

// -------------------------------------------------------------------

// StrangerSearchResp

// .nt.communication.StrangerSearchRespField1 field1 = 1;
inline bool StrangerSearchResp::_internal_has_field1() const {
  return this != internal_default_instance() && _impl_.field1_ != nullptr;
}
inline bool StrangerSearchResp::has_field1() const {
  return _internal_has_field1();
}
inline void StrangerSearchResp::clear_field1() {
  if (GetArenaForAllocation() == nullptr && _impl_.field1_ != nullptr) {
    delete _impl_.field1_;
  }
  _impl_.field1_ = nullptr;
}
inline const ::nt::communication::StrangerSearchRespField1& StrangerSearchResp::_internal_field1() const {
  const ::nt::communication::StrangerSearchRespField1* p = _impl_.field1_;
  return p != nullptr ? *p : reinterpret_cast<const ::nt::communication::StrangerSearchRespField1&>(
      ::nt::communication::_StrangerSearchRespField1_default_instance_);
}
inline const ::nt::communication::StrangerSearchRespField1& StrangerSearchResp::field1() const {
  // @@protoc_insertion_point(field_get:nt.communication.StrangerSearchResp.field1)
  return _internal_field1();
}
inline void StrangerSearchResp::unsafe_arena_set_allocated_field1(
    ::nt::communication::StrangerSearchRespField1* field1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.field1_);
  }
  _impl_.field1_ = field1;
  if (field1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nt.communication.StrangerSearchResp.field1)
}
inline ::nt::communication::StrangerSearchRespField1* StrangerSearchResp::release_field1() {
  
  ::nt::communication::StrangerSearchRespField1* temp = _impl_.field1_;
  _impl_.field1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nt::communication::StrangerSearchRespField1* StrangerSearchResp::unsafe_arena_release_field1() {
  // @@protoc_insertion_point(field_release:nt.communication.StrangerSearchResp.field1)
  
  ::nt::communication::StrangerSearchRespField1* temp = _impl_.field1_;
  _impl_.field1_ = nullptr;
  return temp;
}
inline ::nt::communication::StrangerSearchRespField1* StrangerSearchResp::_internal_mutable_field1() {
  
  if (_impl_.field1_ == nullptr) {
    auto* p = CreateMaybeMessage<::nt::communication::StrangerSearchRespField1>(GetArenaForAllocation());
    _impl_.field1_ = p;
  }
  return _impl_.field1_;
}
inline ::nt::communication::StrangerSearchRespField1* StrangerSearchResp::mutable_field1() {
  ::nt::communication::StrangerSearchRespField1* _msg = _internal_mutable_field1();
  // @@protoc_insertion_point(field_mutable:nt.communication.StrangerSearchResp.field1)
  return _msg;
}
inline void StrangerSearchResp::set_allocated_field1(::nt::communication::StrangerSearchRespField1* field1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.field1_;
  }
  if (field1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(field1);
    if (message_arena != submessage_arena) {
      field1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.field1_ = field1;
  // @@protoc_insertion_point(field_set_allocated:nt.communication.StrangerSearchResp.field1)
}

// optional int32 field2 = 2;
inline bool StrangerSearchResp::_internal_has_field2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StrangerSearchResp::has_field2() const {
  return _internal_has_field2();
}
inline void StrangerSearchResp::clear_field2() {
  _impl_.field2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t StrangerSearchResp::_internal_field2() const {
  return _impl_.field2_;
}
inline int32_t StrangerSearchResp::field2() const {
  // @@protoc_insertion_point(field_get:nt.communication.StrangerSearchResp.field2)
  return _internal_field2();
}
inline void StrangerSearchResp::_internal_set_field2(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.field2_ = value;
}
inline void StrangerSearchResp::set_field2(int32_t value) {
  _internal_set_field2(value);
  // @@protoc_insertion_point(field_set:nt.communication.StrangerSearchResp.field2)
}

// bytes field3 = 3;
inline void StrangerSearchResp::clear_field3() {
  _impl_.field3_.ClearToEmpty();
}
inline const std::string& StrangerSearchResp::field3() const {
  // @@protoc_insertion_point(field_get:nt.communication.StrangerSearchResp.field3)
  return _internal_field3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StrangerSearchResp::set_field3(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field3_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt.communication.StrangerSearchResp.field3)
}
inline std::string* StrangerSearchResp::mutable_field3() {
  std::string* _s = _internal_mutable_field3();
  // @@protoc_insertion_point(field_mutable:nt.communication.StrangerSearchResp.field3)
  return _s;
}
inline const std::string& StrangerSearchResp::_internal_field3() const {
  return _impl_.field3_.Get();
}
inline void StrangerSearchResp::_internal_set_field3(const std::string& value) {
  
  _impl_.field3_.Set(value, GetArenaForAllocation());
}
inline std::string* StrangerSearchResp::_internal_mutable_field3() {
  
  return _impl_.field3_.Mutable(GetArenaForAllocation());
}
inline std::string* StrangerSearchResp::release_field3() {
  // @@protoc_insertion_point(field_release:nt.communication.StrangerSearchResp.field3)
  return _impl_.field3_.Release();
}
inline void StrangerSearchResp::set_allocated_field3(std::string* field3) {
  if (field3 != nullptr) {
    
  } else {
    
  }
  _impl_.field3_.SetAllocated(field3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field3_.IsDefault()) {
    _impl_.field3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt.communication.StrangerSearchResp.field3)
}

// -------------------------------------------------------------------

// StrangerSearchRespField1

// int32 field1 = 1;
inline void StrangerSearchRespField1::clear_field1() {
  _impl_.field1_ = 0;
}
inline int32_t StrangerSearchRespField1::_internal_field1() const {
  return _impl_.field1_;
}
inline int32_t StrangerSearchRespField1::field1() const {
  // @@protoc_insertion_point(field_get:nt.communication.StrangerSearchRespField1.field1)
  return _internal_field1();
}
inline void StrangerSearchRespField1::_internal_set_field1(int32_t value) {
  
  _impl_.field1_ = value;
}
inline void StrangerSearchRespField1::set_field1(int32_t value) {
  _internal_set_field1(value);
  // @@protoc_insertion_point(field_set:nt.communication.StrangerSearchRespField1.field1)
}

// string field2 = 2;
inline void StrangerSearchRespField1::clear_field2() {
  _impl_.field2_.ClearToEmpty();
}
inline const std::string& StrangerSearchRespField1::field2() const {
  // @@protoc_insertion_point(field_get:nt.communication.StrangerSearchRespField1.field2)
  return _internal_field2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StrangerSearchRespField1::set_field2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt.communication.StrangerSearchRespField1.field2)
}
inline std::string* StrangerSearchRespField1::mutable_field2() {
  std::string* _s = _internal_mutable_field2();
  // @@protoc_insertion_point(field_mutable:nt.communication.StrangerSearchRespField1.field2)
  return _s;
}
inline const std::string& StrangerSearchRespField1::_internal_field2() const {
  return _impl_.field2_.Get();
}
inline void StrangerSearchRespField1::_internal_set_field2(const std::string& value) {
  
  _impl_.field2_.Set(value, GetArenaForAllocation());
}
inline std::string* StrangerSearchRespField1::_internal_mutable_field2() {
  
  return _impl_.field2_.Mutable(GetArenaForAllocation());
}
inline std::string* StrangerSearchRespField1::release_field2() {
  // @@protoc_insertion_point(field_release:nt.communication.StrangerSearchRespField1.field2)
  return _impl_.field2_.Release();
}
inline void StrangerSearchRespField1::set_allocated_field2(std::string* field2) {
  if (field2 != nullptr) {
    
  } else {
    
  }
  _impl_.field2_.SetAllocated(field2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field2_.IsDefault()) {
    _impl_.field2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt.communication.StrangerSearchRespField1.field2)
}

// optional int32 field4 = 4;
inline bool StrangerSearchRespField1::_internal_has_field4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StrangerSearchRespField1::has_field4() const {
  return _internal_has_field4();
}
inline void StrangerSearchRespField1::clear_field4() {
  _impl_.field4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t StrangerSearchRespField1::_internal_field4() const {
  return _impl_.field4_;
}
inline int32_t StrangerSearchRespField1::field4() const {
  // @@protoc_insertion_point(field_get:nt.communication.StrangerSearchRespField1.field4)
  return _internal_field4();
}
inline void StrangerSearchRespField1::_internal_set_field4(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.field4_ = value;
}
inline void StrangerSearchRespField1::set_field4(int32_t value) {
  _internal_set_field4(value);
  // @@protoc_insertion_point(field_set:nt.communication.StrangerSearchRespField1.field4)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication
}  // namespace nt

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_communication_2eproto
