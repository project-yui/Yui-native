// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto
// Protobuf C++ Version: 4.25.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_message_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_message_2eproto;
namespace nt_msg {
class Element;
struct ElementDefaultTypeInternal;
extern ElementDefaultTypeInternal _Element_default_instance_;
class Element_SourceMsgTextElem;
struct Element_SourceMsgTextElemDefaultTypeInternal;
extern Element_SourceMsgTextElemDefaultTypeInternal _Element_SourceMsgTextElem_default_instance_;
class Elements;
struct ElementsDefaultTypeInternal;
extern ElementsDefaultTypeInternal _Elements_default_instance_;
}  // namespace nt_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace nt_msg {
enum Element_MsgType : int {
  Element_MsgType_MSG_TYPE_ERROR = 0,
  Element_MsgType_MSG_TYPE_TEXT = 1,
  Element_MsgType_MSG_TYPE_PIC = 2,
  Element_MsgType_Element_MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Element_MsgType_Element_MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Element_MsgType_IsValid(int value);
extern const uint32_t Element_MsgType_internal_data_[];
constexpr Element_MsgType Element_MsgType_MsgType_MIN = static_cast<Element_MsgType>(0);
constexpr Element_MsgType Element_MsgType_MsgType_MAX = static_cast<Element_MsgType>(2);
constexpr int Element_MsgType_MsgType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Element_MsgType_descriptor();
template <typename T>
const std::string& Element_MsgType_Name(T value) {
  static_assert(std::is_same<T, Element_MsgType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgType_Name().");
  return Element_MsgType_Name(static_cast<Element_MsgType>(value));
}
template <>
inline const std::string& Element_MsgType_Name(Element_MsgType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Element_MsgType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Element_MsgType_Parse(absl::string_view name, Element_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Element_MsgType>(
      Element_MsgType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Element_SourceMsgTextElem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nt_msg.Element.SourceMsgTextElem) */ {
 public:
  inline Element_SourceMsgTextElem() : Element_SourceMsgTextElem(nullptr) {}
  ~Element_SourceMsgTextElem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Element_SourceMsgTextElem(::google::protobuf::internal::ConstantInitialized);

  inline Element_SourceMsgTextElem(const Element_SourceMsgTextElem& from)
      : Element_SourceMsgTextElem(nullptr, from) {}
  Element_SourceMsgTextElem(Element_SourceMsgTextElem&& from) noexcept
    : Element_SourceMsgTextElem() {
    *this = ::std::move(from);
  }

  inline Element_SourceMsgTextElem& operator=(const Element_SourceMsgTextElem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Element_SourceMsgTextElem& operator=(Element_SourceMsgTextElem&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Element_SourceMsgTextElem& default_instance() {
    return *internal_default_instance();
  }
  static inline const Element_SourceMsgTextElem* internal_default_instance() {
    return reinterpret_cast<const Element_SourceMsgTextElem*>(
               &_Element_SourceMsgTextElem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Element_SourceMsgTextElem& a, Element_SourceMsgTextElem& b) {
    a.Swap(&b);
  }
  inline void Swap(Element_SourceMsgTextElem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Element_SourceMsgTextElem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Element_SourceMsgTextElem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Element_SourceMsgTextElem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Element_SourceMsgTextElem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Element_SourceMsgTextElem& from) {
    Element_SourceMsgTextElem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Element_SourceMsgTextElem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "nt_msg.Element.SourceMsgTextElem";
  }
  protected:
  explicit Element_SourceMsgTextElem(::google::protobuf::Arena* arena);
  Element_SourceMsgTextElem(::google::protobuf::Arena* arena, const Element_SourceMsgTextElem& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextElemContentFieldNumber = 45101,
    kUnknown45001FieldNumber = 45001,
    kReplyAbsElemTypeFieldNumber = 45002,
  };
  // string textElemContent = 45101;
  void clear_textelemcontent() ;
  const std::string& textelemcontent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_textelemcontent(Arg_&& arg, Args_... args);
  std::string* mutable_textelemcontent();
  PROTOBUF_NODISCARD std::string* release_textelemcontent();
  void set_allocated_textelemcontent(std::string* value);

  private:
  const std::string& _internal_textelemcontent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_textelemcontent(
      const std::string& value);
  std::string* _internal_mutable_textelemcontent();

  public:
  // int64 unknown_45001 = 45001;
  void clear_unknown_45001() ;
  ::int64_t unknown_45001() const;
  void set_unknown_45001(::int64_t value);

  private:
  ::int64_t _internal_unknown_45001() const;
  void _internal_set_unknown_45001(::int64_t value);

  public:
  // int32 replyAbsElemType = 45002;
  void clear_replyabselemtype() ;
  ::int32_t replyabselemtype() const;
  void set_replyabselemtype(::int32_t value);

  private:
  ::int32_t _internal_replyabselemtype() const;
  void _internal_set_replyabselemtype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:nt_msg.Element.SourceMsgTextElem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 0,
      56, 12>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr textelemcontent_;
    ::int64_t unknown_45001_;
    ::int32_t replyabselemtype_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};// -------------------------------------------------------------------

class Element final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nt_msg.Element) */ {
 public:
  inline Element() : Element(nullptr) {}
  ~Element() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Element(::google::protobuf::internal::ConstantInitialized);

  inline Element(const Element& from)
      : Element(nullptr, from) {}
  Element(Element&& from) noexcept
    : Element() {
    *this = ::std::move(from);
  }

  inline Element& operator=(const Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline Element& operator=(Element&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Element& default_instance() {
    return *internal_default_instance();
  }
  static inline const Element* internal_default_instance() {
    return reinterpret_cast<const Element*>(
               &_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Element& a, Element& b) {
    a.Swap(&b);
  }
  inline void Swap(Element* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Element* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Element* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Element>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Element& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Element& from) {
    Element::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Element* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "nt_msg.Element";
  }
  protected:
  explicit Element(::google::protobuf::Arena* arena);
  Element(::google::protobuf::Arena* arena, const Element& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using SourceMsgTextElem = Element_SourceMsgTextElem;

  using MsgType = Element_MsgType;
  static constexpr MsgType MSG_TYPE_ERROR = Element_MsgType_MSG_TYPE_ERROR;
  static constexpr MsgType MSG_TYPE_TEXT = Element_MsgType_MSG_TYPE_TEXT;
  static constexpr MsgType MSG_TYPE_PIC = Element_MsgType_MSG_TYPE_PIC;
  static inline bool MsgType_IsValid(int value) {
    return Element_MsgType_IsValid(value);
  }
  static constexpr MsgType MsgType_MIN = Element_MsgType_MsgType_MIN;
  static constexpr MsgType MsgType_MAX = Element_MsgType_MsgType_MAX;
  static constexpr int MsgType_ARRAYSIZE = Element_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
    return Element_MsgType_descriptor();
  }
  template <typename T>
  static inline const std::string& MsgType_Name(T value) {
    return Element_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(absl::string_view name, MsgType* value) {
    return Element_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceMsgTextElemsFieldNumber = 47423,
    kSenderUidStrFieldNumber = 40020,
    kTextStrFieldNumber = 45101,
    kFileNameFieldNumber = 45402,
    kUnknown45406FieldNumber = 45406,
    kFileUuidFieldNumber = 45503,
    kImageUrl198FieldNumber = 45802,
    kImageUrl720FieldNumber = 45803,
    kOriginImageUrlFieldNumber = 45804,
    kMsgIdFieldNumber = 45001,
    kMsgTypeFieldNumber = 45002,
    kAtTypeFieldNumber = 45102,
    kFileSizeFieldNumber = 45405,
    kPicWidthFieldNumber = 45411,
    kPicHeightFieldNumber = 45412,
    kUnknown45413FieldNumber = 45413,
    kUnknown45414FieldNumber = 45414,
    kPicTypeFieldNumber = 45416,
    kUnknown45418FieldNumber = 45418,
    kUnknown45805FieldNumber = 45805,
    kUnknown45806FieldNumber = 45806,
    kUnknown45807FieldNumber = 45807,
    kUnknown45829FieldNumber = 45829,
    kReplayMsgSeqFieldNumber = 47402,
    kSenderUidFieldNumber = 47403,
    kReplyMsgTimeFieldNumber = 47404,
    kUnknown47416FieldNumber = 47416,
    kUnknown47422FieldNumber = 47422,
    kUnknown47411FieldNumber = 47411,
  };
  // repeated .nt_msg.Element.SourceMsgTextElem sourceMsgTextElems = 47423;
  int sourcemsgtextelems_size() const;
  private:
  int _internal_sourcemsgtextelems_size() const;

  public:
  void clear_sourcemsgtextelems() ;
  ::nt_msg::Element_SourceMsgTextElem* mutable_sourcemsgtextelems(int index);
  ::google::protobuf::RepeatedPtrField< ::nt_msg::Element_SourceMsgTextElem >*
      mutable_sourcemsgtextelems();
  private:
  const ::google::protobuf::RepeatedPtrField<::nt_msg::Element_SourceMsgTextElem>& _internal_sourcemsgtextelems() const;
  ::google::protobuf::RepeatedPtrField<::nt_msg::Element_SourceMsgTextElem>* _internal_mutable_sourcemsgtextelems();
  public:
  const ::nt_msg::Element_SourceMsgTextElem& sourcemsgtextelems(int index) const;
  ::nt_msg::Element_SourceMsgTextElem* add_sourcemsgtextelems();
  const ::google::protobuf::RepeatedPtrField< ::nt_msg::Element_SourceMsgTextElem >&
      sourcemsgtextelems() const;
  // optional string senderUidStr = 40020;
  bool has_senderuidstr() const;
  void clear_senderuidstr() ;
  const std::string& senderuidstr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_senderuidstr(Arg_&& arg, Args_... args);
  std::string* mutable_senderuidstr();
  PROTOBUF_NODISCARD std::string* release_senderuidstr();
  void set_allocated_senderuidstr(std::string* value);

  private:
  const std::string& _internal_senderuidstr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_senderuidstr(
      const std::string& value);
  std::string* _internal_mutable_senderuidstr();

  public:
  // optional string textStr = 45101;
  bool has_textstr() const;
  void clear_textstr() ;
  const std::string& textstr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_textstr(Arg_&& arg, Args_... args);
  std::string* mutable_textstr();
  PROTOBUF_NODISCARD std::string* release_textstr();
  void set_allocated_textstr(std::string* value);

  private:
  const std::string& _internal_textstr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_textstr(
      const std::string& value);
  std::string* _internal_mutable_textstr();

  public:
  // optional string fileName = 45402;
  bool has_filename() const;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // optional string unknown_45406 = 45406;
  bool has_unknown_45406() const;
  void clear_unknown_45406() ;
  const std::string& unknown_45406() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unknown_45406(Arg_&& arg, Args_... args);
  std::string* mutable_unknown_45406();
  PROTOBUF_NODISCARD std::string* release_unknown_45406();
  void set_allocated_unknown_45406(std::string* value);

  private:
  const std::string& _internal_unknown_45406() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unknown_45406(
      const std::string& value);
  std::string* _internal_mutable_unknown_45406();

  public:
  // optional string fileUuid = 45503;
  bool has_fileuuid() const;
  void clear_fileuuid() ;
  const std::string& fileuuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fileuuid(Arg_&& arg, Args_... args);
  std::string* mutable_fileuuid();
  PROTOBUF_NODISCARD std::string* release_fileuuid();
  void set_allocated_fileuuid(std::string* value);

  private:
  const std::string& _internal_fileuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fileuuid(
      const std::string& value);
  std::string* _internal_mutable_fileuuid();

  public:
  // optional string imageUrl198 = 45802;
  bool has_imageurl198() const;
  void clear_imageurl198() ;
  const std::string& imageurl198() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_imageurl198(Arg_&& arg, Args_... args);
  std::string* mutable_imageurl198();
  PROTOBUF_NODISCARD std::string* release_imageurl198();
  void set_allocated_imageurl198(std::string* value);

  private:
  const std::string& _internal_imageurl198() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imageurl198(
      const std::string& value);
  std::string* _internal_mutable_imageurl198();

  public:
  // optional string imageUrl720 = 45803;
  bool has_imageurl720() const;
  void clear_imageurl720() ;
  const std::string& imageurl720() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_imageurl720(Arg_&& arg, Args_... args);
  std::string* mutable_imageurl720();
  PROTOBUF_NODISCARD std::string* release_imageurl720();
  void set_allocated_imageurl720(std::string* value);

  private:
  const std::string& _internal_imageurl720() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imageurl720(
      const std::string& value);
  std::string* _internal_mutable_imageurl720();

  public:
  // optional string originImageUrl = 45804;
  bool has_originimageurl() const;
  void clear_originimageurl() ;
  const std::string& originimageurl() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_originimageurl(Arg_&& arg, Args_... args);
  std::string* mutable_originimageurl();
  PROTOBUF_NODISCARD std::string* release_originimageurl();
  void set_allocated_originimageurl(std::string* value);

  private:
  const std::string& _internal_originimageurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originimageurl(
      const std::string& value);
  std::string* _internal_mutable_originimageurl();

  public:
  // int64 msgId = 45001;
  void clear_msgid() ;
  ::int64_t msgid() const;
  void set_msgid(::int64_t value);

  private:
  ::int64_t _internal_msgid() const;
  void _internal_set_msgid(::int64_t value);

  public:
  // .nt_msg.Element.MsgType msgType = 45002;
  void clear_msgtype() ;
  ::nt_msg::Element_MsgType msgtype() const;
  void set_msgtype(::nt_msg::Element_MsgType value);

  private:
  ::nt_msg::Element_MsgType _internal_msgtype() const;
  void _internal_set_msgtype(::nt_msg::Element_MsgType value);

  public:
  // optional int32 atType = 45102;
  bool has_attype() const;
  void clear_attype() ;
  ::int32_t attype() const;
  void set_attype(::int32_t value);

  private:
  ::int32_t _internal_attype() const;
  void _internal_set_attype(::int32_t value);

  public:
  // optional int32 fileSize = 45405;
  bool has_filesize() const;
  void clear_filesize() ;
  ::int32_t filesize() const;
  void set_filesize(::int32_t value);

  private:
  ::int32_t _internal_filesize() const;
  void _internal_set_filesize(::int32_t value);

  public:
  // optional int32 picWidth = 45411;
  bool has_picwidth() const;
  void clear_picwidth() ;
  ::int32_t picwidth() const;
  void set_picwidth(::int32_t value);

  private:
  ::int32_t _internal_picwidth() const;
  void _internal_set_picwidth(::int32_t value);

  public:
  // optional int32 picHeight = 45412;
  bool has_picheight() const;
  void clear_picheight() ;
  ::int32_t picheight() const;
  void set_picheight(::int32_t value);

  private:
  ::int32_t _internal_picheight() const;
  void _internal_set_picheight(::int32_t value);

  public:
  // optional int32 unknown_45413 = 45413;
  bool has_unknown_45413() const;
  void clear_unknown_45413() ;
  ::int32_t unknown_45413() const;
  void set_unknown_45413(::int32_t value);

  private:
  ::int32_t _internal_unknown_45413() const;
  void _internal_set_unknown_45413(::int32_t value);

  public:
  // optional int32 unknown_45414 = 45414;
  bool has_unknown_45414() const;
  void clear_unknown_45414() ;
  ::int32_t unknown_45414() const;
  void set_unknown_45414(::int32_t value);

  private:
  ::int32_t _internal_unknown_45414() const;
  void _internal_set_unknown_45414(::int32_t value);

  public:
  // optional int32 picType = 45416;
  bool has_pictype() const;
  void clear_pictype() ;
  ::int32_t pictype() const;
  void set_pictype(::int32_t value);

  private:
  ::int32_t _internal_pictype() const;
  void _internal_set_pictype(::int32_t value);

  public:
  // optional int32 unknown_45418 = 45418;
  bool has_unknown_45418() const;
  void clear_unknown_45418() ;
  ::int32_t unknown_45418() const;
  void set_unknown_45418(::int32_t value);

  private:
  ::int32_t _internal_unknown_45418() const;
  void _internal_set_unknown_45418(::int32_t value);

  public:
  // optional int32 unknown_45805 = 45805;
  bool has_unknown_45805() const;
  void clear_unknown_45805() ;
  ::int32_t unknown_45805() const;
  void set_unknown_45805(::int32_t value);

  private:
  ::int32_t _internal_unknown_45805() const;
  void _internal_set_unknown_45805(::int32_t value);

  public:
  // optional int32 unknown_45806 = 45806;
  bool has_unknown_45806() const;
  void clear_unknown_45806() ;
  ::int32_t unknown_45806() const;
  void set_unknown_45806(::int32_t value);

  private:
  ::int32_t _internal_unknown_45806() const;
  void _internal_set_unknown_45806(::int32_t value);

  public:
  // optional int32 unknown_45807 = 45807;
  bool has_unknown_45807() const;
  void clear_unknown_45807() ;
  ::int32_t unknown_45807() const;
  void set_unknown_45807(::int32_t value);

  private:
  ::int32_t _internal_unknown_45807() const;
  void _internal_set_unknown_45807(::int32_t value);

  public:
  // optional int32 unknown_45829 = 45829;
  bool has_unknown_45829() const;
  void clear_unknown_45829() ;
  ::int32_t unknown_45829() const;
  void set_unknown_45829(::int32_t value);

  private:
  ::int32_t _internal_unknown_45829() const;
  void _internal_set_unknown_45829(::int32_t value);

  public:
  // optional int32 replayMsgSeq = 47402;
  bool has_replaymsgseq() const;
  void clear_replaymsgseq() ;
  ::int32_t replaymsgseq() const;
  void set_replaymsgseq(::int32_t value);

  private:
  ::int32_t _internal_replaymsgseq() const;
  void _internal_set_replaymsgseq(::int32_t value);

  public:
  // optional int32 senderUid = 47403;
  bool has_senderuid() const;
  void clear_senderuid() ;
  ::int32_t senderuid() const;
  void set_senderuid(::int32_t value);

  private:
  ::int32_t _internal_senderuid() const;
  void _internal_set_senderuid(::int32_t value);

  public:
  // optional int32 replyMsgTime = 47404;
  bool has_replymsgtime() const;
  void clear_replymsgtime() ;
  ::int32_t replymsgtime() const;
  void set_replymsgtime(::int32_t value);

  private:
  ::int32_t _internal_replymsgtime() const;
  void _internal_set_replymsgtime(::int32_t value);

  public:
  // optional int64 unknown_47416 = 47416;
  bool has_unknown_47416() const;
  void clear_unknown_47416() ;
  ::int64_t unknown_47416() const;
  void set_unknown_47416(::int64_t value);

  private:
  ::int64_t _internal_unknown_47416() const;
  void _internal_set_unknown_47416(::int64_t value);

  public:
  // optional int64 unknown_47422 = 47422;
  bool has_unknown_47422() const;
  void clear_unknown_47422() ;
  ::int64_t unknown_47422() const;
  void set_unknown_47422(::int64_t value);

  private:
  ::int64_t _internal_unknown_47422() const;
  void _internal_set_unknown_47422(::int64_t value);

  public:
  // optional int32 unknown_47411 = 47411;
  bool has_unknown_47411() const;
  void clear_unknown_47411() ;
  ::int32_t unknown_47411() const;
  void set_unknown_47411(::int32_t value);

  private:
  ::int32_t _internal_unknown_47411() const;
  void _internal_set_unknown_47411(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:nt_msg.Element)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 29, 1,
      131, 48>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::nt_msg::Element_SourceMsgTextElem > sourcemsgtextelems_;
    ::google::protobuf::internal::ArenaStringPtr senderuidstr_;
    ::google::protobuf::internal::ArenaStringPtr textstr_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::ArenaStringPtr unknown_45406_;
    ::google::protobuf::internal::ArenaStringPtr fileuuid_;
    ::google::protobuf::internal::ArenaStringPtr imageurl198_;
    ::google::protobuf::internal::ArenaStringPtr imageurl720_;
    ::google::protobuf::internal::ArenaStringPtr originimageurl_;
    ::int64_t msgid_;
    int msgtype_;
    ::int32_t attype_;
    ::int32_t filesize_;
    ::int32_t picwidth_;
    ::int32_t picheight_;
    ::int32_t unknown_45413_;
    ::int32_t unknown_45414_;
    ::int32_t pictype_;
    ::int32_t unknown_45418_;
    ::int32_t unknown_45805_;
    ::int32_t unknown_45806_;
    ::int32_t unknown_45807_;
    ::int32_t unknown_45829_;
    ::int32_t replaymsgseq_;
    ::int32_t senderuid_;
    ::int32_t replymsgtime_;
    ::int64_t unknown_47416_;
    ::int64_t unknown_47422_;
    ::int32_t unknown_47411_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};// -------------------------------------------------------------------

class Elements final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nt_msg.Elements) */ {
 public:
  inline Elements() : Elements(nullptr) {}
  ~Elements() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Elements(::google::protobuf::internal::ConstantInitialized);

  inline Elements(const Elements& from)
      : Elements(nullptr, from) {}
  Elements(Elements&& from) noexcept
    : Elements() {
    *this = ::std::move(from);
  }

  inline Elements& operator=(const Elements& from) {
    CopyFrom(from);
    return *this;
  }
  inline Elements& operator=(Elements&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Elements& default_instance() {
    return *internal_default_instance();
  }
  static inline const Elements* internal_default_instance() {
    return reinterpret_cast<const Elements*>(
               &_Elements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Elements& a, Elements& b) {
    a.Swap(&b);
  }
  inline void Swap(Elements* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Elements* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Elements* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Elements>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Elements& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Elements& from) {
    Elements::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Elements* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "nt_msg.Elements";
  }
  protected:
  explicit Elements(::google::protobuf::Arena* arena);
  Elements(::google::protobuf::Arena* arena, const Elements& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemFieldNumber = 40800,
  };
  // repeated .nt_msg.Element elem = 40800;
  int elem_size() const;
  private:
  int _internal_elem_size() const;

  public:
  void clear_elem() ;
  ::nt_msg::Element* mutable_elem(int index);
  ::google::protobuf::RepeatedPtrField< ::nt_msg::Element >*
      mutable_elem();
  private:
  const ::google::protobuf::RepeatedPtrField<::nt_msg::Element>& _internal_elem() const;
  ::google::protobuf::RepeatedPtrField<::nt_msg::Element>* _internal_mutable_elem();
  public:
  const ::nt_msg::Element& elem(int index) const;
  ::nt_msg::Element* add_elem();
  const ::google::protobuf::RepeatedPtrField< ::nt_msg::Element >&
      elem() const;
  // @@protoc_insertion_point(class_scope:nt_msg.Elements)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::nt_msg::Element > elem_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Element_SourceMsgTextElem

// int64 unknown_45001 = 45001;
inline void Element_SourceMsgTextElem::clear_unknown_45001() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unknown_45001_ = ::int64_t{0};
}
inline ::int64_t Element_SourceMsgTextElem::unknown_45001() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.SourceMsgTextElem.unknown_45001)
  return _internal_unknown_45001();
}
inline void Element_SourceMsgTextElem::set_unknown_45001(::int64_t value) {
  _internal_set_unknown_45001(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.SourceMsgTextElem.unknown_45001)
}
inline ::int64_t Element_SourceMsgTextElem::_internal_unknown_45001() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unknown_45001_;
}
inline void Element_SourceMsgTextElem::_internal_set_unknown_45001(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.unknown_45001_ = value;
}

// int32 replyAbsElemType = 45002;
inline void Element_SourceMsgTextElem::clear_replyabselemtype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.replyabselemtype_ = 0;
}
inline ::int32_t Element_SourceMsgTextElem::replyabselemtype() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.SourceMsgTextElem.replyAbsElemType)
  return _internal_replyabselemtype();
}
inline void Element_SourceMsgTextElem::set_replyabselemtype(::int32_t value) {
  _internal_set_replyabselemtype(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.SourceMsgTextElem.replyAbsElemType)
}
inline ::int32_t Element_SourceMsgTextElem::_internal_replyabselemtype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.replyabselemtype_;
}
inline void Element_SourceMsgTextElem::_internal_set_replyabselemtype(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.replyabselemtype_ = value;
}

// string textElemContent = 45101;
inline void Element_SourceMsgTextElem::clear_textelemcontent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.textelemcontent_.ClearToEmpty();
}
inline const std::string& Element_SourceMsgTextElem::textelemcontent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nt_msg.Element.SourceMsgTextElem.textElemContent)
  return _internal_textelemcontent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Element_SourceMsgTextElem::set_textelemcontent(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.textelemcontent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nt_msg.Element.SourceMsgTextElem.textElemContent)
}
inline std::string* Element_SourceMsgTextElem::mutable_textelemcontent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_textelemcontent();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.SourceMsgTextElem.textElemContent)
  return _s;
}
inline const std::string& Element_SourceMsgTextElem::_internal_textelemcontent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.textelemcontent_.Get();
}
inline void Element_SourceMsgTextElem::_internal_set_textelemcontent(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.textelemcontent_.Set(value, GetArena());
}
inline std::string* Element_SourceMsgTextElem::_internal_mutable_textelemcontent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.textelemcontent_.Mutable( GetArena());
}
inline std::string* Element_SourceMsgTextElem::release_textelemcontent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nt_msg.Element.SourceMsgTextElem.textElemContent)
  return _impl_.textelemcontent_.Release();
}
inline void Element_SourceMsgTextElem::set_allocated_textelemcontent(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.textelemcontent_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.textelemcontent_.IsDefault()) {
          _impl_.textelemcontent_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.SourceMsgTextElem.textElemContent)
}

// -------------------------------------------------------------------

// Element

// int64 msgId = 45001;
inline void Element::clear_msgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgid_ = ::int64_t{0};
}
inline ::int64_t Element::msgid() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.msgId)
  return _internal_msgid();
}
inline void Element::set_msgid(::int64_t value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.msgId)
}
inline ::int64_t Element::_internal_msgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msgid_;
}
inline void Element::_internal_set_msgid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msgid_ = value;
}

// .nt_msg.Element.MsgType msgType = 45002;
inline void Element::clear_msgtype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgtype_ = 0;
}
inline ::nt_msg::Element_MsgType Element::msgtype() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.msgType)
  return _internal_msgtype();
}
inline void Element::set_msgtype(::nt_msg::Element_MsgType value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.msgType)
}
inline ::nt_msg::Element_MsgType Element::_internal_msgtype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::nt_msg::Element_MsgType>(_impl_.msgtype_);
}
inline void Element::_internal_set_msgtype(::nt_msg::Element_MsgType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msgtype_ = value;
}

// optional string textStr = 45101;
inline bool Element::has_textstr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Element::clear_textstr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.textstr_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Element::textstr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nt_msg.Element.textStr)
  return _internal_textstr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Element::set_textstr(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.textstr_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nt_msg.Element.textStr)
}
inline std::string* Element::mutable_textstr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_textstr();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.textStr)
  return _s;
}
inline const std::string& Element::_internal_textstr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.textstr_.Get();
}
inline void Element::_internal_set_textstr(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.textstr_.Set(value, GetArena());
}
inline std::string* Element::_internal_mutable_textstr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.textstr_.Mutable( GetArena());
}
inline std::string* Element::release_textstr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nt_msg.Element.textStr)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.textstr_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.textstr_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Element::set_allocated_textstr(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.textstr_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.textstr_.IsDefault()) {
          _impl_.textstr_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.textStr)
}

// optional int32 atType = 45102;
inline bool Element::has_attype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Element::clear_attype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t Element::attype() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.atType)
  return _internal_attype();
}
inline void Element::set_attype(::int32_t value) {
  _internal_set_attype(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.atType)
}
inline ::int32_t Element::_internal_attype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attype_;
}
inline void Element::_internal_set_attype(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.attype_ = value;
}

// optional string fileName = 45402;
inline bool Element::has_filename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Element::clear_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Element::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nt_msg.Element.fileName)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Element::set_filename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nt_msg.Element.fileName)
}
inline std::string* Element::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.fileName)
  return _s;
}
inline const std::string& Element::_internal_filename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filename_.Get();
}
inline void Element::_internal_set_filename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* Element::_internal_mutable_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* Element::release_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nt_msg.Element.fileName)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.filename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filename_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Element::set_allocated_filename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.fileName)
}

// optional int32 fileSize = 45405;
inline bool Element::has_filesize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Element::clear_filesize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filesize_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t Element::filesize() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.fileSize)
  return _internal_filesize();
}
inline void Element::set_filesize(::int32_t value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.fileSize)
}
inline ::int32_t Element::_internal_filesize() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filesize_;
}
inline void Element::_internal_set_filesize(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.filesize_ = value;
}

// optional string unknown_45406 = 45406;
inline bool Element::has_unknown_45406() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Element::clear_unknown_45406() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unknown_45406_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Element::unknown_45406() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45406)
  return _internal_unknown_45406();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Element::set_unknown_45406(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.unknown_45406_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45406)
}
inline std::string* Element::mutable_unknown_45406() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_unknown_45406();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.unknown_45406)
  return _s;
}
inline const std::string& Element::_internal_unknown_45406() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unknown_45406_.Get();
}
inline void Element::_internal_set_unknown_45406(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.unknown_45406_.Set(value, GetArena());
}
inline std::string* Element::_internal_mutable_unknown_45406() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.unknown_45406_.Mutable( GetArena());
}
inline std::string* Element::release_unknown_45406() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nt_msg.Element.unknown_45406)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.unknown_45406_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unknown_45406_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Element::set_allocated_unknown_45406(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.unknown_45406_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unknown_45406_.IsDefault()) {
          _impl_.unknown_45406_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.unknown_45406)
}

// optional int32 picWidth = 45411;
inline bool Element::has_picwidth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Element::clear_picwidth() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.picwidth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t Element::picwidth() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.picWidth)
  return _internal_picwidth();
}
inline void Element::set_picwidth(::int32_t value) {
  _internal_set_picwidth(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.picWidth)
}
inline ::int32_t Element::_internal_picwidth() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.picwidth_;
}
inline void Element::_internal_set_picwidth(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.picwidth_ = value;
}

// optional int32 picHeight = 45412;
inline bool Element::has_picheight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Element::clear_picheight() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.picheight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t Element::picheight() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.picHeight)
  return _internal_picheight();
}
inline void Element::set_picheight(::int32_t value) {
  _internal_set_picheight(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.picHeight)
}
inline ::int32_t Element::_internal_picheight() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.picheight_;
}
inline void Element::_internal_set_picheight(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.picheight_ = value;
}

// optional int32 unknown_45413 = 45413;
inline bool Element::has_unknown_45413() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Element::clear_unknown_45413() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unknown_45413_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t Element::unknown_45413() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45413)
  return _internal_unknown_45413();
}
inline void Element::set_unknown_45413(::int32_t value) {
  _internal_set_unknown_45413(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45413)
}
inline ::int32_t Element::_internal_unknown_45413() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unknown_45413_;
}
inline void Element::_internal_set_unknown_45413(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.unknown_45413_ = value;
}

// optional int32 unknown_45414 = 45414;
inline bool Element::has_unknown_45414() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Element::clear_unknown_45414() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unknown_45414_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int32_t Element::unknown_45414() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45414)
  return _internal_unknown_45414();
}
inline void Element::set_unknown_45414(::int32_t value) {
  _internal_set_unknown_45414(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45414)
}
inline ::int32_t Element::_internal_unknown_45414() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unknown_45414_;
}
inline void Element::_internal_set_unknown_45414(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.unknown_45414_ = value;
}

// optional int32 picType = 45416;
inline bool Element::has_pictype() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Element::clear_pictype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pictype_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::int32_t Element::pictype() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.picType)
  return _internal_pictype();
}
inline void Element::set_pictype(::int32_t value) {
  _internal_set_pictype(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.picType)
}
inline ::int32_t Element::_internal_pictype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pictype_;
}
inline void Element::_internal_set_pictype(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.pictype_ = value;
}

// optional int32 unknown_45418 = 45418;
inline bool Element::has_unknown_45418() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Element::clear_unknown_45418() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unknown_45418_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int32_t Element::unknown_45418() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45418)
  return _internal_unknown_45418();
}
inline void Element::set_unknown_45418(::int32_t value) {
  _internal_set_unknown_45418(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45418)
}
inline ::int32_t Element::_internal_unknown_45418() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unknown_45418_;
}
inline void Element::_internal_set_unknown_45418(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.unknown_45418_ = value;
}

// optional string fileUuid = 45503;
inline bool Element::has_fileuuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Element::clear_fileuuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fileuuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Element::fileuuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nt_msg.Element.fileUuid)
  return _internal_fileuuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Element::set_fileuuid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.fileuuid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nt_msg.Element.fileUuid)
}
inline std::string* Element::mutable_fileuuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_fileuuid();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.fileUuid)
  return _s;
}
inline const std::string& Element::_internal_fileuuid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fileuuid_.Get();
}
inline void Element::_internal_set_fileuuid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.fileuuid_.Set(value, GetArena());
}
inline std::string* Element::_internal_mutable_fileuuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.fileuuid_.Mutable( GetArena());
}
inline std::string* Element::release_fileuuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nt_msg.Element.fileUuid)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.fileuuid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileuuid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Element::set_allocated_fileuuid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.fileuuid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fileuuid_.IsDefault()) {
          _impl_.fileuuid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.fileUuid)
}

// optional string imageUrl198 = 45802;
inline bool Element::has_imageurl198() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Element::clear_imageurl198() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.imageurl198_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Element::imageurl198() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nt_msg.Element.imageUrl198)
  return _internal_imageurl198();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Element::set_imageurl198(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.imageurl198_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nt_msg.Element.imageUrl198)
}
inline std::string* Element::mutable_imageurl198() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_imageurl198();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.imageUrl198)
  return _s;
}
inline const std::string& Element::_internal_imageurl198() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.imageurl198_.Get();
}
inline void Element::_internal_set_imageurl198(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.imageurl198_.Set(value, GetArena());
}
inline std::string* Element::_internal_mutable_imageurl198() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.imageurl198_.Mutable( GetArena());
}
inline std::string* Element::release_imageurl198() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nt_msg.Element.imageUrl198)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.imageurl198_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imageurl198_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Element::set_allocated_imageurl198(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.imageurl198_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.imageurl198_.IsDefault()) {
          _impl_.imageurl198_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.imageUrl198)
}

// optional string imageUrl720 = 45803;
inline bool Element::has_imageurl720() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Element::clear_imageurl720() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.imageurl720_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Element::imageurl720() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nt_msg.Element.imageUrl720)
  return _internal_imageurl720();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Element::set_imageurl720(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.imageurl720_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nt_msg.Element.imageUrl720)
}
inline std::string* Element::mutable_imageurl720() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_imageurl720();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.imageUrl720)
  return _s;
}
inline const std::string& Element::_internal_imageurl720() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.imageurl720_.Get();
}
inline void Element::_internal_set_imageurl720(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.imageurl720_.Set(value, GetArena());
}
inline std::string* Element::_internal_mutable_imageurl720() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.imageurl720_.Mutable( GetArena());
}
inline std::string* Element::release_imageurl720() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nt_msg.Element.imageUrl720)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.imageurl720_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imageurl720_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Element::set_allocated_imageurl720(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.imageurl720_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.imageurl720_.IsDefault()) {
          _impl_.imageurl720_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.imageUrl720)
}

// optional string originImageUrl = 45804;
inline bool Element::has_originimageurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Element::clear_originimageurl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.originimageurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Element::originimageurl() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nt_msg.Element.originImageUrl)
  return _internal_originimageurl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Element::set_originimageurl(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.originimageurl_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nt_msg.Element.originImageUrl)
}
inline std::string* Element::mutable_originimageurl() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_originimageurl();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.originImageUrl)
  return _s;
}
inline const std::string& Element::_internal_originimageurl() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.originimageurl_.Get();
}
inline void Element::_internal_set_originimageurl(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.originimageurl_.Set(value, GetArena());
}
inline std::string* Element::_internal_mutable_originimageurl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.originimageurl_.Mutable( GetArena());
}
inline std::string* Element::release_originimageurl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nt_msg.Element.originImageUrl)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.originimageurl_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.originimageurl_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Element::set_allocated_originimageurl(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.originimageurl_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.originimageurl_.IsDefault()) {
          _impl_.originimageurl_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.originImageUrl)
}

// optional int32 unknown_45805 = 45805;
inline bool Element::has_unknown_45805() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Element::clear_unknown_45805() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unknown_45805_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int32_t Element::unknown_45805() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45805)
  return _internal_unknown_45805();
}
inline void Element::set_unknown_45805(::int32_t value) {
  _internal_set_unknown_45805(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45805)
}
inline ::int32_t Element::_internal_unknown_45805() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unknown_45805_;
}
inline void Element::_internal_set_unknown_45805(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.unknown_45805_ = value;
}

// optional int32 unknown_45806 = 45806;
inline bool Element::has_unknown_45806() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Element::clear_unknown_45806() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unknown_45806_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::int32_t Element::unknown_45806() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45806)
  return _internal_unknown_45806();
}
inline void Element::set_unknown_45806(::int32_t value) {
  _internal_set_unknown_45806(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45806)
}
inline ::int32_t Element::_internal_unknown_45806() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unknown_45806_;
}
inline void Element::_internal_set_unknown_45806(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.unknown_45806_ = value;
}

// optional int32 unknown_45807 = 45807;
inline bool Element::has_unknown_45807() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Element::clear_unknown_45807() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unknown_45807_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int32_t Element::unknown_45807() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45807)
  return _internal_unknown_45807();
}
inline void Element::set_unknown_45807(::int32_t value) {
  _internal_set_unknown_45807(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45807)
}
inline ::int32_t Element::_internal_unknown_45807() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unknown_45807_;
}
inline void Element::_internal_set_unknown_45807(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.unknown_45807_ = value;
}

// optional int32 unknown_45829 = 45829;
inline bool Element::has_unknown_45829() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Element::clear_unknown_45829() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unknown_45829_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int32_t Element::unknown_45829() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45829)
  return _internal_unknown_45829();
}
inline void Element::set_unknown_45829(::int32_t value) {
  _internal_set_unknown_45829(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45829)
}
inline ::int32_t Element::_internal_unknown_45829() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unknown_45829_;
}
inline void Element::_internal_set_unknown_45829(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.unknown_45829_ = value;
}

// optional string senderUidStr = 40020;
inline bool Element::has_senderuidstr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Element::clear_senderuidstr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.senderuidstr_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Element::senderuidstr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nt_msg.Element.senderUidStr)
  return _internal_senderuidstr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Element::set_senderuidstr(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.senderuidstr_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nt_msg.Element.senderUidStr)
}
inline std::string* Element::mutable_senderuidstr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_senderuidstr();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.senderUidStr)
  return _s;
}
inline const std::string& Element::_internal_senderuidstr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.senderuidstr_.Get();
}
inline void Element::_internal_set_senderuidstr(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.senderuidstr_.Set(value, GetArena());
}
inline std::string* Element::_internal_mutable_senderuidstr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.senderuidstr_.Mutable( GetArena());
}
inline std::string* Element::release_senderuidstr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nt_msg.Element.senderUidStr)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.senderuidstr_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.senderuidstr_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Element::set_allocated_senderuidstr(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.senderuidstr_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.senderuidstr_.IsDefault()) {
          _impl_.senderuidstr_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.senderUidStr)
}

// optional int32 replayMsgSeq = 47402;
inline bool Element::has_replaymsgseq() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Element::clear_replaymsgseq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.replaymsgseq_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int32_t Element::replaymsgseq() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.replayMsgSeq)
  return _internal_replaymsgseq();
}
inline void Element::set_replaymsgseq(::int32_t value) {
  _internal_set_replaymsgseq(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.replayMsgSeq)
}
inline ::int32_t Element::_internal_replaymsgseq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.replaymsgseq_;
}
inline void Element::_internal_set_replaymsgseq(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.replaymsgseq_ = value;
}

// optional int32 senderUid = 47403;
inline bool Element::has_senderuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Element::clear_senderuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.senderuid_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::int32_t Element::senderuid() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.senderUid)
  return _internal_senderuid();
}
inline void Element::set_senderuid(::int32_t value) {
  _internal_set_senderuid(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.senderUid)
}
inline ::int32_t Element::_internal_senderuid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.senderuid_;
}
inline void Element::_internal_set_senderuid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.senderuid_ = value;
}

// optional int32 replyMsgTime = 47404;
inline bool Element::has_replymsgtime() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void Element::clear_replymsgtime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.replymsgtime_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::int32_t Element::replymsgtime() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.replyMsgTime)
  return _internal_replymsgtime();
}
inline void Element::set_replymsgtime(::int32_t value) {
  _internal_set_replymsgtime(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.replyMsgTime)
}
inline ::int32_t Element::_internal_replymsgtime() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.replymsgtime_;
}
inline void Element::_internal_set_replymsgtime(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.replymsgtime_ = value;
}

// optional int32 unknown_47411 = 47411;
inline bool Element::has_unknown_47411() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void Element::clear_unknown_47411() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unknown_47411_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::int32_t Element::unknown_47411() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_47411)
  return _internal_unknown_47411();
}
inline void Element::set_unknown_47411(::int32_t value) {
  _internal_set_unknown_47411(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_47411)
}
inline ::int32_t Element::_internal_unknown_47411() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unknown_47411_;
}
inline void Element::_internal_set_unknown_47411(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.unknown_47411_ = value;
}

// optional int64 unknown_47416 = 47416;
inline bool Element::has_unknown_47416() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void Element::clear_unknown_47416() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unknown_47416_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::int64_t Element::unknown_47416() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_47416)
  return _internal_unknown_47416();
}
inline void Element::set_unknown_47416(::int64_t value) {
  _internal_set_unknown_47416(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_47416)
}
inline ::int64_t Element::_internal_unknown_47416() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unknown_47416_;
}
inline void Element::_internal_set_unknown_47416(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.unknown_47416_ = value;
}

// optional int64 unknown_47422 = 47422;
inline bool Element::has_unknown_47422() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void Element::clear_unknown_47422() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unknown_47422_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::int64_t Element::unknown_47422() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_47422)
  return _internal_unknown_47422();
}
inline void Element::set_unknown_47422(::int64_t value) {
  _internal_set_unknown_47422(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_47422)
}
inline ::int64_t Element::_internal_unknown_47422() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unknown_47422_;
}
inline void Element::_internal_set_unknown_47422(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.unknown_47422_ = value;
}

// repeated .nt_msg.Element.SourceMsgTextElem sourceMsgTextElems = 47423;
inline int Element::_internal_sourcemsgtextelems_size() const {
  return _internal_sourcemsgtextelems().size();
}
inline int Element::sourcemsgtextelems_size() const {
  return _internal_sourcemsgtextelems_size();
}
inline void Element::clear_sourcemsgtextelems() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sourcemsgtextelems_.Clear();
}
inline ::nt_msg::Element_SourceMsgTextElem* Element::mutable_sourcemsgtextelems(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.sourceMsgTextElems)
  return _internal_mutable_sourcemsgtextelems()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nt_msg::Element_SourceMsgTextElem>* Element::mutable_sourcemsgtextelems()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nt_msg.Element.sourceMsgTextElems)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sourcemsgtextelems();
}
inline const ::nt_msg::Element_SourceMsgTextElem& Element::sourcemsgtextelems(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nt_msg.Element.sourceMsgTextElems)
  return _internal_sourcemsgtextelems().Get(index);
}
inline ::nt_msg::Element_SourceMsgTextElem* Element::add_sourcemsgtextelems() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::nt_msg::Element_SourceMsgTextElem* _add = _internal_mutable_sourcemsgtextelems()->Add();
  // @@protoc_insertion_point(field_add:nt_msg.Element.sourceMsgTextElems)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nt_msg::Element_SourceMsgTextElem>& Element::sourcemsgtextelems() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nt_msg.Element.sourceMsgTextElems)
  return _internal_sourcemsgtextelems();
}
inline const ::google::protobuf::RepeatedPtrField<::nt_msg::Element_SourceMsgTextElem>&
Element::_internal_sourcemsgtextelems() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sourcemsgtextelems_;
}
inline ::google::protobuf::RepeatedPtrField<::nt_msg::Element_SourceMsgTextElem>*
Element::_internal_mutable_sourcemsgtextelems() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sourcemsgtextelems_;
}

// -------------------------------------------------------------------

// Elements

// repeated .nt_msg.Element elem = 40800;
inline int Elements::_internal_elem_size() const {
  return _internal_elem().size();
}
inline int Elements::elem_size() const {
  return _internal_elem_size();
}
inline void Elements::clear_elem() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.elem_.Clear();
}
inline ::nt_msg::Element* Elements::mutable_elem(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nt_msg.Elements.elem)
  return _internal_mutable_elem()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nt_msg::Element>* Elements::mutable_elem()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nt_msg.Elements.elem)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_elem();
}
inline const ::nt_msg::Element& Elements::elem(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nt_msg.Elements.elem)
  return _internal_elem().Get(index);
}
inline ::nt_msg::Element* Elements::add_elem() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::nt_msg::Element* _add = _internal_mutable_elem()->Add();
  // @@protoc_insertion_point(field_add:nt_msg.Elements.elem)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nt_msg::Element>& Elements::elem() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nt_msg.Elements.elem)
  return _internal_elem();
}
inline const ::google::protobuf::RepeatedPtrField<::nt_msg::Element>&
Elements::_internal_elem() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.elem_;
}
inline ::google::protobuf::RepeatedPtrField<::nt_msg::Element>*
Elements::_internal_mutable_elem() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.elem_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace nt_msg


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::nt_msg::Element_MsgType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::nt_msg::Element_MsgType>() {
  return ::nt_msg::Element_MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_message_2eproto_2epb_2eh
