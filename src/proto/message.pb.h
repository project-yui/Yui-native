// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace nt_msg {
class Element;
struct ElementDefaultTypeInternal;
extern ElementDefaultTypeInternal _Element_default_instance_;
class Element_SourceMsgTextElem;
struct Element_SourceMsgTextElemDefaultTypeInternal;
extern Element_SourceMsgTextElemDefaultTypeInternal _Element_SourceMsgTextElem_default_instance_;
class Elements;
struct ElementsDefaultTypeInternal;
extern ElementsDefaultTypeInternal _Elements_default_instance_;
}  // namespace nt_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::nt_msg::Element* Arena::CreateMaybeMessage<::nt_msg::Element>(Arena*);
template<> ::nt_msg::Element_SourceMsgTextElem* Arena::CreateMaybeMessage<::nt_msg::Element_SourceMsgTextElem>(Arena*);
template<> ::nt_msg::Elements* Arena::CreateMaybeMessage<::nt_msg::Elements>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nt_msg {

enum Element_MsgType : int {
  Element_MsgType_MSG_TYPE_ERROR = 0,
  Element_MsgType_MSG_TYPE_TEXT = 1,
  Element_MsgType_MSG_TYPE_PIC = 2,
  Element_MsgType_Element_MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Element_MsgType_Element_MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Element_MsgType_IsValid(int value);
constexpr Element_MsgType Element_MsgType_MsgType_MIN = Element_MsgType_MSG_TYPE_ERROR;
constexpr Element_MsgType Element_MsgType_MsgType_MAX = Element_MsgType_MSG_TYPE_PIC;
constexpr int Element_MsgType_MsgType_ARRAYSIZE = Element_MsgType_MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Element_MsgType_descriptor();
template<typename T>
inline const std::string& Element_MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Element_MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Element_MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Element_MsgType_descriptor(), enum_t_value);
}
inline bool Element_MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Element_MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Element_MsgType>(
    Element_MsgType_descriptor(), name, value);
}
// ===================================================================

class Element_SourceMsgTextElem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nt_msg.Element.SourceMsgTextElem) */ {
 public:
  inline Element_SourceMsgTextElem() : Element_SourceMsgTextElem(nullptr) {}
  ~Element_SourceMsgTextElem() override;
  explicit PROTOBUF_CONSTEXPR Element_SourceMsgTextElem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Element_SourceMsgTextElem(const Element_SourceMsgTextElem& from);
  Element_SourceMsgTextElem(Element_SourceMsgTextElem&& from) noexcept
    : Element_SourceMsgTextElem() {
    *this = ::std::move(from);
  }

  inline Element_SourceMsgTextElem& operator=(const Element_SourceMsgTextElem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Element_SourceMsgTextElem& operator=(Element_SourceMsgTextElem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Element_SourceMsgTextElem& default_instance() {
    return *internal_default_instance();
  }
  static inline const Element_SourceMsgTextElem* internal_default_instance() {
    return reinterpret_cast<const Element_SourceMsgTextElem*>(
               &_Element_SourceMsgTextElem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Element_SourceMsgTextElem& a, Element_SourceMsgTextElem& b) {
    a.Swap(&b);
  }
  inline void Swap(Element_SourceMsgTextElem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Element_SourceMsgTextElem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Element_SourceMsgTextElem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Element_SourceMsgTextElem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Element_SourceMsgTextElem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Element_SourceMsgTextElem& from) {
    Element_SourceMsgTextElem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Element_SourceMsgTextElem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nt_msg.Element.SourceMsgTextElem";
  }
  protected:
  explicit Element_SourceMsgTextElem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextElemContentFieldNumber = 45101,
    kUnknown45001FieldNumber = 45001,
    kReplyAbsElemTypeFieldNumber = 45002,
  };
  // string textElemContent = 45101;
  void clear_textelemcontent();
  const std::string& textelemcontent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_textelemcontent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_textelemcontent();
  PROTOBUF_NODISCARD std::string* release_textelemcontent();
  void set_allocated_textelemcontent(std::string* textelemcontent);
  private:
  const std::string& _internal_textelemcontent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_textelemcontent(const std::string& value);
  std::string* _internal_mutable_textelemcontent();
  public:

  // int64 unknown_45001 = 45001;
  void clear_unknown_45001();
  int64_t unknown_45001() const;
  void set_unknown_45001(int64_t value);
  private:
  int64_t _internal_unknown_45001() const;
  void _internal_set_unknown_45001(int64_t value);
  public:

  // int32 replyAbsElemType = 45002;
  void clear_replyabselemtype();
  int32_t replyabselemtype() const;
  void set_replyabselemtype(int32_t value);
  private:
  int32_t _internal_replyabselemtype() const;
  void _internal_set_replyabselemtype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:nt_msg.Element.SourceMsgTextElem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr textelemcontent_;
    int64_t unknown_45001_;
    int32_t replyabselemtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Element final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nt_msg.Element) */ {
 public:
  inline Element() : Element(nullptr) {}
  ~Element() override;
  explicit PROTOBUF_CONSTEXPR Element(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Element(const Element& from);
  Element(Element&& from) noexcept
    : Element() {
    *this = ::std::move(from);
  }

  inline Element& operator=(const Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline Element& operator=(Element&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Element& default_instance() {
    return *internal_default_instance();
  }
  static inline const Element* internal_default_instance() {
    return reinterpret_cast<const Element*>(
               &_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Element& a, Element& b) {
    a.Swap(&b);
  }
  inline void Swap(Element* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Element* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Element>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Element& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Element& from) {
    Element::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Element* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nt_msg.Element";
  }
  protected:
  explicit Element(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Element_SourceMsgTextElem SourceMsgTextElem;

  typedef Element_MsgType MsgType;
  static constexpr MsgType MSG_TYPE_ERROR =
    Element_MsgType_MSG_TYPE_ERROR;
  static constexpr MsgType MSG_TYPE_TEXT =
    Element_MsgType_MSG_TYPE_TEXT;
  static constexpr MsgType MSG_TYPE_PIC =
    Element_MsgType_MSG_TYPE_PIC;
  static inline bool MsgType_IsValid(int value) {
    return Element_MsgType_IsValid(value);
  }
  static constexpr MsgType MsgType_MIN =
    Element_MsgType_MsgType_MIN;
  static constexpr MsgType MsgType_MAX =
    Element_MsgType_MsgType_MAX;
  static constexpr int MsgType_ARRAYSIZE =
    Element_MsgType_MsgType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgType_descriptor() {
    return Element_MsgType_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgType_Name.");
    return Element_MsgType_Name(enum_t_value);
  }
  static inline bool MsgType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgType* value) {
    return Element_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceMsgTextElemsFieldNumber = 47423,
    kSenderUidStrFieldNumber = 40020,
    kTextStrFieldNumber = 45101,
    kFileNameFieldNumber = 45402,
    kUnknown45406FieldNumber = 45406,
    kFileUuidFieldNumber = 45503,
    kImageUrl198FieldNumber = 45802,
    kImageUrl720FieldNumber = 45803,
    kOriginImageUrlFieldNumber = 45804,
    kElementIdFieldNumber = 45001,
    kElementTypeFieldNumber = 45002,
    kAtTypeFieldNumber = 45102,
    kFileSizeFieldNumber = 45405,
    kPicWidthFieldNumber = 45411,
    kPicHeightFieldNumber = 45412,
    kUnknown45413FieldNumber = 45413,
    kUnknown45414FieldNumber = 45414,
    kPicTypeFieldNumber = 45416,
    kUnknown45418FieldNumber = 45418,
    kUnknown45805FieldNumber = 45805,
    kUnknown45806FieldNumber = 45806,
    kUnknown45807FieldNumber = 45807,
    kUnknown45829FieldNumber = 45829,
    kReplayMsgSeqFieldNumber = 47402,
    kSenderUidFieldNumber = 47403,
    kReplyMsgTimeFieldNumber = 47404,
    kUnknown47416FieldNumber = 47416,
    kUnknown47422FieldNumber = 47422,
    kUnknown47411FieldNumber = 47411,
  };
  // repeated .nt_msg.Element.SourceMsgTextElem sourceMsgTextElems = 47423;
  int sourcemsgtextelems_size() const;
  private:
  int _internal_sourcemsgtextelems_size() const;
  public:
  void clear_sourcemsgtextelems();
  ::nt_msg::Element_SourceMsgTextElem* mutable_sourcemsgtextelems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nt_msg::Element_SourceMsgTextElem >*
      mutable_sourcemsgtextelems();
  private:
  const ::nt_msg::Element_SourceMsgTextElem& _internal_sourcemsgtextelems(int index) const;
  ::nt_msg::Element_SourceMsgTextElem* _internal_add_sourcemsgtextelems();
  public:
  const ::nt_msg::Element_SourceMsgTextElem& sourcemsgtextelems(int index) const;
  ::nt_msg::Element_SourceMsgTextElem* add_sourcemsgtextelems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nt_msg::Element_SourceMsgTextElem >&
      sourcemsgtextelems() const;

  // optional string senderUidStr = 40020;
  bool has_senderuidstr() const;
  private:
  bool _internal_has_senderuidstr() const;
  public:
  void clear_senderuidstr();
  const std::string& senderuidstr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_senderuidstr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_senderuidstr();
  PROTOBUF_NODISCARD std::string* release_senderuidstr();
  void set_allocated_senderuidstr(std::string* senderuidstr);
  private:
  const std::string& _internal_senderuidstr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_senderuidstr(const std::string& value);
  std::string* _internal_mutable_senderuidstr();
  public:

  // optional string textStr = 45101;
  bool has_textstr() const;
  private:
  bool _internal_has_textstr() const;
  public:
  void clear_textstr();
  const std::string& textstr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_textstr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_textstr();
  PROTOBUF_NODISCARD std::string* release_textstr();
  void set_allocated_textstr(std::string* textstr);
  private:
  const std::string& _internal_textstr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_textstr(const std::string& value);
  std::string* _internal_mutable_textstr();
  public:

  // optional string fileName = 45402;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string unknown_45406 = 45406;
  bool has_unknown_45406() const;
  private:
  bool _internal_has_unknown_45406() const;
  public:
  void clear_unknown_45406();
  const std::string& unknown_45406() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unknown_45406(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unknown_45406();
  PROTOBUF_NODISCARD std::string* release_unknown_45406();
  void set_allocated_unknown_45406(std::string* unknown_45406);
  private:
  const std::string& _internal_unknown_45406() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unknown_45406(const std::string& value);
  std::string* _internal_mutable_unknown_45406();
  public:

  // optional string fileUuid = 45503;
  bool has_fileuuid() const;
  private:
  bool _internal_has_fileuuid() const;
  public:
  void clear_fileuuid();
  const std::string& fileuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fileuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fileuuid();
  PROTOBUF_NODISCARD std::string* release_fileuuid();
  void set_allocated_fileuuid(std::string* fileuuid);
  private:
  const std::string& _internal_fileuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fileuuid(const std::string& value);
  std::string* _internal_mutable_fileuuid();
  public:

  // optional string imageUrl198 = 45802;
  bool has_imageurl198() const;
  private:
  bool _internal_has_imageurl198() const;
  public:
  void clear_imageurl198();
  const std::string& imageurl198() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imageurl198(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imageurl198();
  PROTOBUF_NODISCARD std::string* release_imageurl198();
  void set_allocated_imageurl198(std::string* imageurl198);
  private:
  const std::string& _internal_imageurl198() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imageurl198(const std::string& value);
  std::string* _internal_mutable_imageurl198();
  public:

  // optional string imageUrl720 = 45803;
  bool has_imageurl720() const;
  private:
  bool _internal_has_imageurl720() const;
  public:
  void clear_imageurl720();
  const std::string& imageurl720() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imageurl720(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imageurl720();
  PROTOBUF_NODISCARD std::string* release_imageurl720();
  void set_allocated_imageurl720(std::string* imageurl720);
  private:
  const std::string& _internal_imageurl720() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imageurl720(const std::string& value);
  std::string* _internal_mutable_imageurl720();
  public:

  // optional string originImageUrl = 45804;
  bool has_originimageurl() const;
  private:
  bool _internal_has_originimageurl() const;
  public:
  void clear_originimageurl();
  const std::string& originimageurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_originimageurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_originimageurl();
  PROTOBUF_NODISCARD std::string* release_originimageurl();
  void set_allocated_originimageurl(std::string* originimageurl);
  private:
  const std::string& _internal_originimageurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originimageurl(const std::string& value);
  std::string* _internal_mutable_originimageurl();
  public:

  // int64 elementId = 45001;
  void clear_elementid();
  int64_t elementid() const;
  void set_elementid(int64_t value);
  private:
  int64_t _internal_elementid() const;
  void _internal_set_elementid(int64_t value);
  public:

  // int32 elementType = 45002;
  void clear_elementtype();
  int32_t elementtype() const;
  void set_elementtype(int32_t value);
  private:
  int32_t _internal_elementtype() const;
  void _internal_set_elementtype(int32_t value);
  public:

  // optional int32 atType = 45102;
  bool has_attype() const;
  private:
  bool _internal_has_attype() const;
  public:
  void clear_attype();
  int32_t attype() const;
  void set_attype(int32_t value);
  private:
  int32_t _internal_attype() const;
  void _internal_set_attype(int32_t value);
  public:

  // optional int32 fileSize = 45405;
  bool has_filesize() const;
  private:
  bool _internal_has_filesize() const;
  public:
  void clear_filesize();
  int32_t filesize() const;
  void set_filesize(int32_t value);
  private:
  int32_t _internal_filesize() const;
  void _internal_set_filesize(int32_t value);
  public:

  // optional int32 picWidth = 45411;
  bool has_picwidth() const;
  private:
  bool _internal_has_picwidth() const;
  public:
  void clear_picwidth();
  int32_t picwidth() const;
  void set_picwidth(int32_t value);
  private:
  int32_t _internal_picwidth() const;
  void _internal_set_picwidth(int32_t value);
  public:

  // optional int32 picHeight = 45412;
  bool has_picheight() const;
  private:
  bool _internal_has_picheight() const;
  public:
  void clear_picheight();
  int32_t picheight() const;
  void set_picheight(int32_t value);
  private:
  int32_t _internal_picheight() const;
  void _internal_set_picheight(int32_t value);
  public:

  // optional int32 unknown_45413 = 45413;
  bool has_unknown_45413() const;
  private:
  bool _internal_has_unknown_45413() const;
  public:
  void clear_unknown_45413();
  int32_t unknown_45413() const;
  void set_unknown_45413(int32_t value);
  private:
  int32_t _internal_unknown_45413() const;
  void _internal_set_unknown_45413(int32_t value);
  public:

  // optional int32 unknown_45414 = 45414;
  bool has_unknown_45414() const;
  private:
  bool _internal_has_unknown_45414() const;
  public:
  void clear_unknown_45414();
  int32_t unknown_45414() const;
  void set_unknown_45414(int32_t value);
  private:
  int32_t _internal_unknown_45414() const;
  void _internal_set_unknown_45414(int32_t value);
  public:

  // optional int32 picType = 45416;
  bool has_pictype() const;
  private:
  bool _internal_has_pictype() const;
  public:
  void clear_pictype();
  int32_t pictype() const;
  void set_pictype(int32_t value);
  private:
  int32_t _internal_pictype() const;
  void _internal_set_pictype(int32_t value);
  public:

  // optional int32 unknown_45418 = 45418;
  bool has_unknown_45418() const;
  private:
  bool _internal_has_unknown_45418() const;
  public:
  void clear_unknown_45418();
  int32_t unknown_45418() const;
  void set_unknown_45418(int32_t value);
  private:
  int32_t _internal_unknown_45418() const;
  void _internal_set_unknown_45418(int32_t value);
  public:

  // optional int32 unknown_45805 = 45805;
  bool has_unknown_45805() const;
  private:
  bool _internal_has_unknown_45805() const;
  public:
  void clear_unknown_45805();
  int32_t unknown_45805() const;
  void set_unknown_45805(int32_t value);
  private:
  int32_t _internal_unknown_45805() const;
  void _internal_set_unknown_45805(int32_t value);
  public:

  // optional int32 unknown_45806 = 45806;
  bool has_unknown_45806() const;
  private:
  bool _internal_has_unknown_45806() const;
  public:
  void clear_unknown_45806();
  int32_t unknown_45806() const;
  void set_unknown_45806(int32_t value);
  private:
  int32_t _internal_unknown_45806() const;
  void _internal_set_unknown_45806(int32_t value);
  public:

  // optional int32 unknown_45807 = 45807;
  bool has_unknown_45807() const;
  private:
  bool _internal_has_unknown_45807() const;
  public:
  void clear_unknown_45807();
  int32_t unknown_45807() const;
  void set_unknown_45807(int32_t value);
  private:
  int32_t _internal_unknown_45807() const;
  void _internal_set_unknown_45807(int32_t value);
  public:

  // optional int32 unknown_45829 = 45829;
  bool has_unknown_45829() const;
  private:
  bool _internal_has_unknown_45829() const;
  public:
  void clear_unknown_45829();
  int32_t unknown_45829() const;
  void set_unknown_45829(int32_t value);
  private:
  int32_t _internal_unknown_45829() const;
  void _internal_set_unknown_45829(int32_t value);
  public:

  // optional int32 replayMsgSeq = 47402;
  bool has_replaymsgseq() const;
  private:
  bool _internal_has_replaymsgseq() const;
  public:
  void clear_replaymsgseq();
  int32_t replaymsgseq() const;
  void set_replaymsgseq(int32_t value);
  private:
  int32_t _internal_replaymsgseq() const;
  void _internal_set_replaymsgseq(int32_t value);
  public:

  // optional int32 senderUid = 47403;
  bool has_senderuid() const;
  private:
  bool _internal_has_senderuid() const;
  public:
  void clear_senderuid();
  int32_t senderuid() const;
  void set_senderuid(int32_t value);
  private:
  int32_t _internal_senderuid() const;
  void _internal_set_senderuid(int32_t value);
  public:

  // optional int32 replyMsgTime = 47404;
  bool has_replymsgtime() const;
  private:
  bool _internal_has_replymsgtime() const;
  public:
  void clear_replymsgtime();
  int32_t replymsgtime() const;
  void set_replymsgtime(int32_t value);
  private:
  int32_t _internal_replymsgtime() const;
  void _internal_set_replymsgtime(int32_t value);
  public:

  // optional int64 unknown_47416 = 47416;
  bool has_unknown_47416() const;
  private:
  bool _internal_has_unknown_47416() const;
  public:
  void clear_unknown_47416();
  int64_t unknown_47416() const;
  void set_unknown_47416(int64_t value);
  private:
  int64_t _internal_unknown_47416() const;
  void _internal_set_unknown_47416(int64_t value);
  public:

  // optional int64 unknown_47422 = 47422;
  bool has_unknown_47422() const;
  private:
  bool _internal_has_unknown_47422() const;
  public:
  void clear_unknown_47422();
  int64_t unknown_47422() const;
  void set_unknown_47422(int64_t value);
  private:
  int64_t _internal_unknown_47422() const;
  void _internal_set_unknown_47422(int64_t value);
  public:

  // optional int32 unknown_47411 = 47411;
  bool has_unknown_47411() const;
  private:
  bool _internal_has_unknown_47411() const;
  public:
  void clear_unknown_47411();
  int32_t unknown_47411() const;
  void set_unknown_47411(int32_t value);
  private:
  int32_t _internal_unknown_47411() const;
  void _internal_set_unknown_47411(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:nt_msg.Element)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nt_msg::Element_SourceMsgTextElem > sourcemsgtextelems_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr senderuidstr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr textstr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unknown_45406_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fileuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imageurl198_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imageurl720_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originimageurl_;
    int64_t elementid_;
    int32_t elementtype_;
    int32_t attype_;
    int32_t filesize_;
    int32_t picwidth_;
    int32_t picheight_;
    int32_t unknown_45413_;
    int32_t unknown_45414_;
    int32_t pictype_;
    int32_t unknown_45418_;
    int32_t unknown_45805_;
    int32_t unknown_45806_;
    int32_t unknown_45807_;
    int32_t unknown_45829_;
    int32_t replaymsgseq_;
    int32_t senderuid_;
    int32_t replymsgtime_;
    int64_t unknown_47416_;
    int64_t unknown_47422_;
    int32_t unknown_47411_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Elements final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nt_msg.Elements) */ {
 public:
  inline Elements() : Elements(nullptr) {}
  ~Elements() override;
  explicit PROTOBUF_CONSTEXPR Elements(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Elements(const Elements& from);
  Elements(Elements&& from) noexcept
    : Elements() {
    *this = ::std::move(from);
  }

  inline Elements& operator=(const Elements& from) {
    CopyFrom(from);
    return *this;
  }
  inline Elements& operator=(Elements&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Elements& default_instance() {
    return *internal_default_instance();
  }
  static inline const Elements* internal_default_instance() {
    return reinterpret_cast<const Elements*>(
               &_Elements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Elements& a, Elements& b) {
    a.Swap(&b);
  }
  inline void Swap(Elements* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Elements* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Elements* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Elements>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Elements& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Elements& from) {
    Elements::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Elements* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nt_msg.Elements";
  }
  protected:
  explicit Elements(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemFieldNumber = 40800,
  };
  // repeated .nt_msg.Element elem = 40800;
  int elem_size() const;
  private:
  int _internal_elem_size() const;
  public:
  void clear_elem();
  ::nt_msg::Element* mutable_elem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nt_msg::Element >*
      mutable_elem();
  private:
  const ::nt_msg::Element& _internal_elem(int index) const;
  ::nt_msg::Element* _internal_add_elem();
  public:
  const ::nt_msg::Element& elem(int index) const;
  ::nt_msg::Element* add_elem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nt_msg::Element >&
      elem() const;

  // @@protoc_insertion_point(class_scope:nt_msg.Elements)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nt_msg::Element > elem_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Element_SourceMsgTextElem

// int64 unknown_45001 = 45001;
inline void Element_SourceMsgTextElem::clear_unknown_45001() {
  _impl_.unknown_45001_ = int64_t{0};
}
inline int64_t Element_SourceMsgTextElem::_internal_unknown_45001() const {
  return _impl_.unknown_45001_;
}
inline int64_t Element_SourceMsgTextElem::unknown_45001() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.SourceMsgTextElem.unknown_45001)
  return _internal_unknown_45001();
}
inline void Element_SourceMsgTextElem::_internal_set_unknown_45001(int64_t value) {
  
  _impl_.unknown_45001_ = value;
}
inline void Element_SourceMsgTextElem::set_unknown_45001(int64_t value) {
  _internal_set_unknown_45001(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.SourceMsgTextElem.unknown_45001)
}

// int32 replyAbsElemType = 45002;
inline void Element_SourceMsgTextElem::clear_replyabselemtype() {
  _impl_.replyabselemtype_ = 0;
}
inline int32_t Element_SourceMsgTextElem::_internal_replyabselemtype() const {
  return _impl_.replyabselemtype_;
}
inline int32_t Element_SourceMsgTextElem::replyabselemtype() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.SourceMsgTextElem.replyAbsElemType)
  return _internal_replyabselemtype();
}
inline void Element_SourceMsgTextElem::_internal_set_replyabselemtype(int32_t value) {
  
  _impl_.replyabselemtype_ = value;
}
inline void Element_SourceMsgTextElem::set_replyabselemtype(int32_t value) {
  _internal_set_replyabselemtype(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.SourceMsgTextElem.replyAbsElemType)
}

// string textElemContent = 45101;
inline void Element_SourceMsgTextElem::clear_textelemcontent() {
  _impl_.textelemcontent_.ClearToEmpty();
}
inline const std::string& Element_SourceMsgTextElem::textelemcontent() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.SourceMsgTextElem.textElemContent)
  return _internal_textelemcontent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element_SourceMsgTextElem::set_textelemcontent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.textelemcontent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt_msg.Element.SourceMsgTextElem.textElemContent)
}
inline std::string* Element_SourceMsgTextElem::mutable_textelemcontent() {
  std::string* _s = _internal_mutable_textelemcontent();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.SourceMsgTextElem.textElemContent)
  return _s;
}
inline const std::string& Element_SourceMsgTextElem::_internal_textelemcontent() const {
  return _impl_.textelemcontent_.Get();
}
inline void Element_SourceMsgTextElem::_internal_set_textelemcontent(const std::string& value) {
  
  _impl_.textelemcontent_.Set(value, GetArenaForAllocation());
}
inline std::string* Element_SourceMsgTextElem::_internal_mutable_textelemcontent() {
  
  return _impl_.textelemcontent_.Mutable(GetArenaForAllocation());
}
inline std::string* Element_SourceMsgTextElem::release_textelemcontent() {
  // @@protoc_insertion_point(field_release:nt_msg.Element.SourceMsgTextElem.textElemContent)
  return _impl_.textelemcontent_.Release();
}
inline void Element_SourceMsgTextElem::set_allocated_textelemcontent(std::string* textelemcontent) {
  if (textelemcontent != nullptr) {
    
  } else {
    
  }
  _impl_.textelemcontent_.SetAllocated(textelemcontent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.textelemcontent_.IsDefault()) {
    _impl_.textelemcontent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.SourceMsgTextElem.textElemContent)
}

// -------------------------------------------------------------------

// Element

// int64 elementId = 45001;
inline void Element::clear_elementid() {
  _impl_.elementid_ = int64_t{0};
}
inline int64_t Element::_internal_elementid() const {
  return _impl_.elementid_;
}
inline int64_t Element::elementid() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.elementId)
  return _internal_elementid();
}
inline void Element::_internal_set_elementid(int64_t value) {
  
  _impl_.elementid_ = value;
}
inline void Element::set_elementid(int64_t value) {
  _internal_set_elementid(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.elementId)
}

// int32 elementType = 45002;
inline void Element::clear_elementtype() {
  _impl_.elementtype_ = 0;
}
inline int32_t Element::_internal_elementtype() const {
  return _impl_.elementtype_;
}
inline int32_t Element::elementtype() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.elementType)
  return _internal_elementtype();
}
inline void Element::_internal_set_elementtype(int32_t value) {
  
  _impl_.elementtype_ = value;
}
inline void Element::set_elementtype(int32_t value) {
  _internal_set_elementtype(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.elementType)
}

// optional string textStr = 45101;
inline bool Element::_internal_has_textstr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Element::has_textstr() const {
  return _internal_has_textstr();
}
inline void Element::clear_textstr() {
  _impl_.textstr_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Element::textstr() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.textStr)
  return _internal_textstr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element::set_textstr(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.textstr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt_msg.Element.textStr)
}
inline std::string* Element::mutable_textstr() {
  std::string* _s = _internal_mutable_textstr();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.textStr)
  return _s;
}
inline const std::string& Element::_internal_textstr() const {
  return _impl_.textstr_.Get();
}
inline void Element::_internal_set_textstr(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.textstr_.Set(value, GetArenaForAllocation());
}
inline std::string* Element::_internal_mutable_textstr() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.textstr_.Mutable(GetArenaForAllocation());
}
inline std::string* Element::release_textstr() {
  // @@protoc_insertion_point(field_release:nt_msg.Element.textStr)
  if (!_internal_has_textstr()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.textstr_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.textstr_.IsDefault()) {
    _impl_.textstr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Element::set_allocated_textstr(std::string* textstr) {
  if (textstr != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.textstr_.SetAllocated(textstr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.textstr_.IsDefault()) {
    _impl_.textstr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.textStr)
}

// optional int32 atType = 45102;
inline bool Element::_internal_has_attype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Element::has_attype() const {
  return _internal_has_attype();
}
inline void Element::clear_attype() {
  _impl_.attype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t Element::_internal_attype() const {
  return _impl_.attype_;
}
inline int32_t Element::attype() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.atType)
  return _internal_attype();
}
inline void Element::_internal_set_attype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.attype_ = value;
}
inline void Element::set_attype(int32_t value) {
  _internal_set_attype(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.atType)
}

// optional string fileName = 45402;
inline bool Element::_internal_has_filename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Element::has_filename() const {
  return _internal_has_filename();
}
inline void Element::clear_filename() {
  _impl_.filename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Element::filename() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.fileName)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element::set_filename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt_msg.Element.fileName)
}
inline std::string* Element::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.fileName)
  return _s;
}
inline const std::string& Element::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void Element::_internal_set_filename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* Element::_internal_mutable_filename() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* Element::release_filename() {
  // @@protoc_insertion_point(field_release:nt_msg.Element.fileName)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.filename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Element::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.fileName)
}

// optional int32 fileSize = 45405;
inline bool Element::_internal_has_filesize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Element::has_filesize() const {
  return _internal_has_filesize();
}
inline void Element::clear_filesize() {
  _impl_.filesize_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t Element::_internal_filesize() const {
  return _impl_.filesize_;
}
inline int32_t Element::filesize() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.fileSize)
  return _internal_filesize();
}
inline void Element::_internal_set_filesize(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.filesize_ = value;
}
inline void Element::set_filesize(int32_t value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.fileSize)
}

// optional string unknown_45406 = 45406;
inline bool Element::_internal_has_unknown_45406() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Element::has_unknown_45406() const {
  return _internal_has_unknown_45406();
}
inline void Element::clear_unknown_45406() {
  _impl_.unknown_45406_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Element::unknown_45406() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45406)
  return _internal_unknown_45406();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element::set_unknown_45406(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.unknown_45406_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45406)
}
inline std::string* Element::mutable_unknown_45406() {
  std::string* _s = _internal_mutable_unknown_45406();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.unknown_45406)
  return _s;
}
inline const std::string& Element::_internal_unknown_45406() const {
  return _impl_.unknown_45406_.Get();
}
inline void Element::_internal_set_unknown_45406(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.unknown_45406_.Set(value, GetArenaForAllocation());
}
inline std::string* Element::_internal_mutable_unknown_45406() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.unknown_45406_.Mutable(GetArenaForAllocation());
}
inline std::string* Element::release_unknown_45406() {
  // @@protoc_insertion_point(field_release:nt_msg.Element.unknown_45406)
  if (!_internal_has_unknown_45406()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.unknown_45406_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_45406_.IsDefault()) {
    _impl_.unknown_45406_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Element::set_allocated_unknown_45406(std::string* unknown_45406) {
  if (unknown_45406 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.unknown_45406_.SetAllocated(unknown_45406, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.unknown_45406_.IsDefault()) {
    _impl_.unknown_45406_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.unknown_45406)
}

// optional int32 picWidth = 45411;
inline bool Element::_internal_has_picwidth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Element::has_picwidth() const {
  return _internal_has_picwidth();
}
inline void Element::clear_picwidth() {
  _impl_.picwidth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t Element::_internal_picwidth() const {
  return _impl_.picwidth_;
}
inline int32_t Element::picwidth() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.picWidth)
  return _internal_picwidth();
}
inline void Element::_internal_set_picwidth(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.picwidth_ = value;
}
inline void Element::set_picwidth(int32_t value) {
  _internal_set_picwidth(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.picWidth)
}

// optional int32 picHeight = 45412;
inline bool Element::_internal_has_picheight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Element::has_picheight() const {
  return _internal_has_picheight();
}
inline void Element::clear_picheight() {
  _impl_.picheight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t Element::_internal_picheight() const {
  return _impl_.picheight_;
}
inline int32_t Element::picheight() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.picHeight)
  return _internal_picheight();
}
inline void Element::_internal_set_picheight(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.picheight_ = value;
}
inline void Element::set_picheight(int32_t value) {
  _internal_set_picheight(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.picHeight)
}

// optional int32 unknown_45413 = 45413;
inline bool Element::_internal_has_unknown_45413() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Element::has_unknown_45413() const {
  return _internal_has_unknown_45413();
}
inline void Element::clear_unknown_45413() {
  _impl_.unknown_45413_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t Element::_internal_unknown_45413() const {
  return _impl_.unknown_45413_;
}
inline int32_t Element::unknown_45413() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45413)
  return _internal_unknown_45413();
}
inline void Element::_internal_set_unknown_45413(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.unknown_45413_ = value;
}
inline void Element::set_unknown_45413(int32_t value) {
  _internal_set_unknown_45413(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45413)
}

// optional int32 unknown_45414 = 45414;
inline bool Element::_internal_has_unknown_45414() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Element::has_unknown_45414() const {
  return _internal_has_unknown_45414();
}
inline void Element::clear_unknown_45414() {
  _impl_.unknown_45414_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t Element::_internal_unknown_45414() const {
  return _impl_.unknown_45414_;
}
inline int32_t Element::unknown_45414() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45414)
  return _internal_unknown_45414();
}
inline void Element::_internal_set_unknown_45414(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.unknown_45414_ = value;
}
inline void Element::set_unknown_45414(int32_t value) {
  _internal_set_unknown_45414(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45414)
}

// optional int32 picType = 45416;
inline bool Element::_internal_has_pictype() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Element::has_pictype() const {
  return _internal_has_pictype();
}
inline void Element::clear_pictype() {
  _impl_.pictype_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t Element::_internal_pictype() const {
  return _impl_.pictype_;
}
inline int32_t Element::pictype() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.picType)
  return _internal_pictype();
}
inline void Element::_internal_set_pictype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.pictype_ = value;
}
inline void Element::set_pictype(int32_t value) {
  _internal_set_pictype(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.picType)
}

// optional int32 unknown_45418 = 45418;
inline bool Element::_internal_has_unknown_45418() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Element::has_unknown_45418() const {
  return _internal_has_unknown_45418();
}
inline void Element::clear_unknown_45418() {
  _impl_.unknown_45418_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t Element::_internal_unknown_45418() const {
  return _impl_.unknown_45418_;
}
inline int32_t Element::unknown_45418() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45418)
  return _internal_unknown_45418();
}
inline void Element::_internal_set_unknown_45418(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.unknown_45418_ = value;
}
inline void Element::set_unknown_45418(int32_t value) {
  _internal_set_unknown_45418(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45418)
}

// optional string fileUuid = 45503;
inline bool Element::_internal_has_fileuuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Element::has_fileuuid() const {
  return _internal_has_fileuuid();
}
inline void Element::clear_fileuuid() {
  _impl_.fileuuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Element::fileuuid() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.fileUuid)
  return _internal_fileuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element::set_fileuuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.fileuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt_msg.Element.fileUuid)
}
inline std::string* Element::mutable_fileuuid() {
  std::string* _s = _internal_mutable_fileuuid();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.fileUuid)
  return _s;
}
inline const std::string& Element::_internal_fileuuid() const {
  return _impl_.fileuuid_.Get();
}
inline void Element::_internal_set_fileuuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.fileuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* Element::_internal_mutable_fileuuid() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.fileuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* Element::release_fileuuid() {
  // @@protoc_insertion_point(field_release:nt_msg.Element.fileUuid)
  if (!_internal_has_fileuuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.fileuuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fileuuid_.IsDefault()) {
    _impl_.fileuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Element::set_allocated_fileuuid(std::string* fileuuid) {
  if (fileuuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.fileuuid_.SetAllocated(fileuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fileuuid_.IsDefault()) {
    _impl_.fileuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.fileUuid)
}

// optional string imageUrl198 = 45802;
inline bool Element::_internal_has_imageurl198() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Element::has_imageurl198() const {
  return _internal_has_imageurl198();
}
inline void Element::clear_imageurl198() {
  _impl_.imageurl198_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Element::imageurl198() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.imageUrl198)
  return _internal_imageurl198();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element::set_imageurl198(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.imageurl198_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt_msg.Element.imageUrl198)
}
inline std::string* Element::mutable_imageurl198() {
  std::string* _s = _internal_mutable_imageurl198();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.imageUrl198)
  return _s;
}
inline const std::string& Element::_internal_imageurl198() const {
  return _impl_.imageurl198_.Get();
}
inline void Element::_internal_set_imageurl198(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.imageurl198_.Set(value, GetArenaForAllocation());
}
inline std::string* Element::_internal_mutable_imageurl198() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.imageurl198_.Mutable(GetArenaForAllocation());
}
inline std::string* Element::release_imageurl198() {
  // @@protoc_insertion_point(field_release:nt_msg.Element.imageUrl198)
  if (!_internal_has_imageurl198()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.imageurl198_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imageurl198_.IsDefault()) {
    _impl_.imageurl198_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Element::set_allocated_imageurl198(std::string* imageurl198) {
  if (imageurl198 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.imageurl198_.SetAllocated(imageurl198, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imageurl198_.IsDefault()) {
    _impl_.imageurl198_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.imageUrl198)
}

// optional string imageUrl720 = 45803;
inline bool Element::_internal_has_imageurl720() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Element::has_imageurl720() const {
  return _internal_has_imageurl720();
}
inline void Element::clear_imageurl720() {
  _impl_.imageurl720_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Element::imageurl720() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.imageUrl720)
  return _internal_imageurl720();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element::set_imageurl720(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.imageurl720_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt_msg.Element.imageUrl720)
}
inline std::string* Element::mutable_imageurl720() {
  std::string* _s = _internal_mutable_imageurl720();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.imageUrl720)
  return _s;
}
inline const std::string& Element::_internal_imageurl720() const {
  return _impl_.imageurl720_.Get();
}
inline void Element::_internal_set_imageurl720(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.imageurl720_.Set(value, GetArenaForAllocation());
}
inline std::string* Element::_internal_mutable_imageurl720() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.imageurl720_.Mutable(GetArenaForAllocation());
}
inline std::string* Element::release_imageurl720() {
  // @@protoc_insertion_point(field_release:nt_msg.Element.imageUrl720)
  if (!_internal_has_imageurl720()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.imageurl720_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imageurl720_.IsDefault()) {
    _impl_.imageurl720_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Element::set_allocated_imageurl720(std::string* imageurl720) {
  if (imageurl720 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.imageurl720_.SetAllocated(imageurl720, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imageurl720_.IsDefault()) {
    _impl_.imageurl720_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.imageUrl720)
}

// optional string originImageUrl = 45804;
inline bool Element::_internal_has_originimageurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Element::has_originimageurl() const {
  return _internal_has_originimageurl();
}
inline void Element::clear_originimageurl() {
  _impl_.originimageurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Element::originimageurl() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.originImageUrl)
  return _internal_originimageurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element::set_originimageurl(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.originimageurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt_msg.Element.originImageUrl)
}
inline std::string* Element::mutable_originimageurl() {
  std::string* _s = _internal_mutable_originimageurl();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.originImageUrl)
  return _s;
}
inline const std::string& Element::_internal_originimageurl() const {
  return _impl_.originimageurl_.Get();
}
inline void Element::_internal_set_originimageurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.originimageurl_.Set(value, GetArenaForAllocation());
}
inline std::string* Element::_internal_mutable_originimageurl() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.originimageurl_.Mutable(GetArenaForAllocation());
}
inline std::string* Element::release_originimageurl() {
  // @@protoc_insertion_point(field_release:nt_msg.Element.originImageUrl)
  if (!_internal_has_originimageurl()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.originimageurl_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.originimageurl_.IsDefault()) {
    _impl_.originimageurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Element::set_allocated_originimageurl(std::string* originimageurl) {
  if (originimageurl != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.originimageurl_.SetAllocated(originimageurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.originimageurl_.IsDefault()) {
    _impl_.originimageurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.originImageUrl)
}

// optional int32 unknown_45805 = 45805;
inline bool Element::_internal_has_unknown_45805() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Element::has_unknown_45805() const {
  return _internal_has_unknown_45805();
}
inline void Element::clear_unknown_45805() {
  _impl_.unknown_45805_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline int32_t Element::_internal_unknown_45805() const {
  return _impl_.unknown_45805_;
}
inline int32_t Element::unknown_45805() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45805)
  return _internal_unknown_45805();
}
inline void Element::_internal_set_unknown_45805(int32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.unknown_45805_ = value;
}
inline void Element::set_unknown_45805(int32_t value) {
  _internal_set_unknown_45805(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45805)
}

// optional int32 unknown_45806 = 45806;
inline bool Element::_internal_has_unknown_45806() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Element::has_unknown_45806() const {
  return _internal_has_unknown_45806();
}
inline void Element::clear_unknown_45806() {
  _impl_.unknown_45806_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline int32_t Element::_internal_unknown_45806() const {
  return _impl_.unknown_45806_;
}
inline int32_t Element::unknown_45806() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45806)
  return _internal_unknown_45806();
}
inline void Element::_internal_set_unknown_45806(int32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.unknown_45806_ = value;
}
inline void Element::set_unknown_45806(int32_t value) {
  _internal_set_unknown_45806(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45806)
}

// optional int32 unknown_45807 = 45807;
inline bool Element::_internal_has_unknown_45807() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Element::has_unknown_45807() const {
  return _internal_has_unknown_45807();
}
inline void Element::clear_unknown_45807() {
  _impl_.unknown_45807_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline int32_t Element::_internal_unknown_45807() const {
  return _impl_.unknown_45807_;
}
inline int32_t Element::unknown_45807() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45807)
  return _internal_unknown_45807();
}
inline void Element::_internal_set_unknown_45807(int32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.unknown_45807_ = value;
}
inline void Element::set_unknown_45807(int32_t value) {
  _internal_set_unknown_45807(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45807)
}

// optional int32 unknown_45829 = 45829;
inline bool Element::_internal_has_unknown_45829() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Element::has_unknown_45829() const {
  return _internal_has_unknown_45829();
}
inline void Element::clear_unknown_45829() {
  _impl_.unknown_45829_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline int32_t Element::_internal_unknown_45829() const {
  return _impl_.unknown_45829_;
}
inline int32_t Element::unknown_45829() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_45829)
  return _internal_unknown_45829();
}
inline void Element::_internal_set_unknown_45829(int32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.unknown_45829_ = value;
}
inline void Element::set_unknown_45829(int32_t value) {
  _internal_set_unknown_45829(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_45829)
}

// optional string senderUidStr = 40020;
inline bool Element::_internal_has_senderuidstr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Element::has_senderuidstr() const {
  return _internal_has_senderuidstr();
}
inline void Element::clear_senderuidstr() {
  _impl_.senderuidstr_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Element::senderuidstr() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.senderUidStr)
  return _internal_senderuidstr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Element::set_senderuidstr(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.senderuidstr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt_msg.Element.senderUidStr)
}
inline std::string* Element::mutable_senderuidstr() {
  std::string* _s = _internal_mutable_senderuidstr();
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.senderUidStr)
  return _s;
}
inline const std::string& Element::_internal_senderuidstr() const {
  return _impl_.senderuidstr_.Get();
}
inline void Element::_internal_set_senderuidstr(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.senderuidstr_.Set(value, GetArenaForAllocation());
}
inline std::string* Element::_internal_mutable_senderuidstr() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.senderuidstr_.Mutable(GetArenaForAllocation());
}
inline std::string* Element::release_senderuidstr() {
  // @@protoc_insertion_point(field_release:nt_msg.Element.senderUidStr)
  if (!_internal_has_senderuidstr()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.senderuidstr_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.senderuidstr_.IsDefault()) {
    _impl_.senderuidstr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Element::set_allocated_senderuidstr(std::string* senderuidstr) {
  if (senderuidstr != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.senderuidstr_.SetAllocated(senderuidstr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.senderuidstr_.IsDefault()) {
    _impl_.senderuidstr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt_msg.Element.senderUidStr)
}

// optional int32 replayMsgSeq = 47402;
inline bool Element::_internal_has_replaymsgseq() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Element::has_replaymsgseq() const {
  return _internal_has_replaymsgseq();
}
inline void Element::clear_replaymsgseq() {
  _impl_.replaymsgseq_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline int32_t Element::_internal_replaymsgseq() const {
  return _impl_.replaymsgseq_;
}
inline int32_t Element::replaymsgseq() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.replayMsgSeq)
  return _internal_replaymsgseq();
}
inline void Element::_internal_set_replaymsgseq(int32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.replaymsgseq_ = value;
}
inline void Element::set_replaymsgseq(int32_t value) {
  _internal_set_replaymsgseq(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.replayMsgSeq)
}

// optional int32 senderUid = 47403;
inline bool Element::_internal_has_senderuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Element::has_senderuid() const {
  return _internal_has_senderuid();
}
inline void Element::clear_senderuid() {
  _impl_.senderuid_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline int32_t Element::_internal_senderuid() const {
  return _impl_.senderuid_;
}
inline int32_t Element::senderuid() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.senderUid)
  return _internal_senderuid();
}
inline void Element::_internal_set_senderuid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.senderuid_ = value;
}
inline void Element::set_senderuid(int32_t value) {
  _internal_set_senderuid(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.senderUid)
}

// optional int32 replyMsgTime = 47404;
inline bool Element::_internal_has_replymsgtime() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Element::has_replymsgtime() const {
  return _internal_has_replymsgtime();
}
inline void Element::clear_replymsgtime() {
  _impl_.replymsgtime_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline int32_t Element::_internal_replymsgtime() const {
  return _impl_.replymsgtime_;
}
inline int32_t Element::replymsgtime() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.replyMsgTime)
  return _internal_replymsgtime();
}
inline void Element::_internal_set_replymsgtime(int32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.replymsgtime_ = value;
}
inline void Element::set_replymsgtime(int32_t value) {
  _internal_set_replymsgtime(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.replyMsgTime)
}

// optional int32 unknown_47411 = 47411;
inline bool Element::_internal_has_unknown_47411() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool Element::has_unknown_47411() const {
  return _internal_has_unknown_47411();
}
inline void Element::clear_unknown_47411() {
  _impl_.unknown_47411_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline int32_t Element::_internal_unknown_47411() const {
  return _impl_.unknown_47411_;
}
inline int32_t Element::unknown_47411() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_47411)
  return _internal_unknown_47411();
}
inline void Element::_internal_set_unknown_47411(int32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.unknown_47411_ = value;
}
inline void Element::set_unknown_47411(int32_t value) {
  _internal_set_unknown_47411(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_47411)
}

// optional int64 unknown_47416 = 47416;
inline bool Element::_internal_has_unknown_47416() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Element::has_unknown_47416() const {
  return _internal_has_unknown_47416();
}
inline void Element::clear_unknown_47416() {
  _impl_.unknown_47416_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline int64_t Element::_internal_unknown_47416() const {
  return _impl_.unknown_47416_;
}
inline int64_t Element::unknown_47416() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_47416)
  return _internal_unknown_47416();
}
inline void Element::_internal_set_unknown_47416(int64_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.unknown_47416_ = value;
}
inline void Element::set_unknown_47416(int64_t value) {
  _internal_set_unknown_47416(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_47416)
}

// optional int64 unknown_47422 = 47422;
inline bool Element::_internal_has_unknown_47422() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool Element::has_unknown_47422() const {
  return _internal_has_unknown_47422();
}
inline void Element::clear_unknown_47422() {
  _impl_.unknown_47422_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline int64_t Element::_internal_unknown_47422() const {
  return _impl_.unknown_47422_;
}
inline int64_t Element::unknown_47422() const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.unknown_47422)
  return _internal_unknown_47422();
}
inline void Element::_internal_set_unknown_47422(int64_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.unknown_47422_ = value;
}
inline void Element::set_unknown_47422(int64_t value) {
  _internal_set_unknown_47422(value);
  // @@protoc_insertion_point(field_set:nt_msg.Element.unknown_47422)
}

// repeated .nt_msg.Element.SourceMsgTextElem sourceMsgTextElems = 47423;
inline int Element::_internal_sourcemsgtextelems_size() const {
  return _impl_.sourcemsgtextelems_.size();
}
inline int Element::sourcemsgtextelems_size() const {
  return _internal_sourcemsgtextelems_size();
}
inline void Element::clear_sourcemsgtextelems() {
  _impl_.sourcemsgtextelems_.Clear();
}
inline ::nt_msg::Element_SourceMsgTextElem* Element::mutable_sourcemsgtextelems(int index) {
  // @@protoc_insertion_point(field_mutable:nt_msg.Element.sourceMsgTextElems)
  return _impl_.sourcemsgtextelems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nt_msg::Element_SourceMsgTextElem >*
Element::mutable_sourcemsgtextelems() {
  // @@protoc_insertion_point(field_mutable_list:nt_msg.Element.sourceMsgTextElems)
  return &_impl_.sourcemsgtextelems_;
}
inline const ::nt_msg::Element_SourceMsgTextElem& Element::_internal_sourcemsgtextelems(int index) const {
  return _impl_.sourcemsgtextelems_.Get(index);
}
inline const ::nt_msg::Element_SourceMsgTextElem& Element::sourcemsgtextelems(int index) const {
  // @@protoc_insertion_point(field_get:nt_msg.Element.sourceMsgTextElems)
  return _internal_sourcemsgtextelems(index);
}
inline ::nt_msg::Element_SourceMsgTextElem* Element::_internal_add_sourcemsgtextelems() {
  return _impl_.sourcemsgtextelems_.Add();
}
inline ::nt_msg::Element_SourceMsgTextElem* Element::add_sourcemsgtextelems() {
  ::nt_msg::Element_SourceMsgTextElem* _add = _internal_add_sourcemsgtextelems();
  // @@protoc_insertion_point(field_add:nt_msg.Element.sourceMsgTextElems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nt_msg::Element_SourceMsgTextElem >&
Element::sourcemsgtextelems() const {
  // @@protoc_insertion_point(field_list:nt_msg.Element.sourceMsgTextElems)
  return _impl_.sourcemsgtextelems_;
}

// -------------------------------------------------------------------

// Elements

// repeated .nt_msg.Element elem = 40800;
inline int Elements::_internal_elem_size() const {
  return _impl_.elem_.size();
}
inline int Elements::elem_size() const {
  return _internal_elem_size();
}
inline void Elements::clear_elem() {
  _impl_.elem_.Clear();
}
inline ::nt_msg::Element* Elements::mutable_elem(int index) {
  // @@protoc_insertion_point(field_mutable:nt_msg.Elements.elem)
  return _impl_.elem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nt_msg::Element >*
Elements::mutable_elem() {
  // @@protoc_insertion_point(field_mutable_list:nt_msg.Elements.elem)
  return &_impl_.elem_;
}
inline const ::nt_msg::Element& Elements::_internal_elem(int index) const {
  return _impl_.elem_.Get(index);
}
inline const ::nt_msg::Element& Elements::elem(int index) const {
  // @@protoc_insertion_point(field_get:nt_msg.Elements.elem)
  return _internal_elem(index);
}
inline ::nt_msg::Element* Elements::_internal_add_elem() {
  return _impl_.elem_.Add();
}
inline ::nt_msg::Element* Elements::add_elem() {
  ::nt_msg::Element* _add = _internal_add_elem();
  // @@protoc_insertion_point(field_add:nt_msg.Elements.elem)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nt_msg::Element >&
Elements::elem() const {
  // @@protoc_insertion_point(field_list:nt_msg.Elements.elem)
  return _impl_.elem_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nt_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nt_msg::Element_MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nt_msg::Element_MsgType>() {
  return ::nt_msg::Element_MsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
