// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_search_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_search_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_search_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_search_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_search_2eproto;
namespace nt {
namespace search {
class Body;
struct BodyDefaultTypeInternal;
extern BodyDefaultTypeInternal _Body_default_instance_;
class Settings;
struct SettingsDefaultTypeInternal;
extern SettingsDefaultTypeInternal _Settings_default_instance_;
class Stranger;
struct StrangerDefaultTypeInternal;
extern StrangerDefaultTypeInternal _Stranger_default_instance_;
}  // namespace search
}  // namespace nt
PROTOBUF_NAMESPACE_OPEN
template<> ::nt::search::Body* Arena::CreateMaybeMessage<::nt::search::Body>(Arena*);
template<> ::nt::search::Settings* Arena::CreateMaybeMessage<::nt::search::Settings>(Arena*);
template<> ::nt::search::Stranger* Arena::CreateMaybeMessage<::nt::search::Stranger>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nt {
namespace search {

// ===================================================================

class Stranger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nt.search.Stranger) */ {
 public:
  inline Stranger() : Stranger(nullptr) {}
  ~Stranger() override;
  explicit PROTOBUF_CONSTEXPR Stranger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stranger(const Stranger& from);
  Stranger(Stranger&& from) noexcept
    : Stranger() {
    *this = ::std::move(from);
  }

  inline Stranger& operator=(const Stranger& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stranger& operator=(Stranger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stranger& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stranger* internal_default_instance() {
    return reinterpret_cast<const Stranger*>(
               &_Stranger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Stranger& a, Stranger& b) {
    a.Swap(&b);
  }
  inline void Swap(Stranger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stranger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stranger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stranger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stranger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stranger& from) {
    Stranger::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stranger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nt.search.Stranger";
  }
  protected:
  explicit Stranger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 4,
    kCommandFieldNumber = 1,
    kSubCommandFieldNumber = 2,
  };
  // .nt.search.Body body = 4;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::nt::search::Body& body() const;
  PROTOBUF_NODISCARD ::nt::search::Body* release_body();
  ::nt::search::Body* mutable_body();
  void set_allocated_body(::nt::search::Body* body);
  private:
  const ::nt::search::Body& _internal_body() const;
  ::nt::search::Body* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::nt::search::Body* body);
  ::nt::search::Body* unsafe_arena_release_body();

  // optional int32 command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  int32_t command() const;
  void set_command(int32_t value);
  private:
  int32_t _internal_command() const;
  void _internal_set_command(int32_t value);
  public:

  // optional int32 subCommand = 2;
  bool has_subcommand() const;
  private:
  bool _internal_has_subcommand() const;
  public:
  void clear_subcommand();
  int32_t subcommand() const;
  void set_subcommand(int32_t value);
  private:
  int32_t _internal_subcommand() const;
  void _internal_set_subcommand(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:nt.search.Stranger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::nt::search::Body* body_;
    int32_t command_;
    int32_t subcommand_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class Body final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nt.search.Body) */ {
 public:
  inline Body() : Body(nullptr) {}
  ~Body() override;
  explicit PROTOBUF_CONSTEXPR Body(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Body(const Body& from);
  Body(Body&& from) noexcept
    : Body() {
    *this = ::std::move(from);
  }

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }
  inline Body& operator=(Body&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Body& default_instance() {
    return *internal_default_instance();
  }
  static inline const Body* internal_default_instance() {
    return reinterpret_cast<const Body*>(
               &_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Body& a, Body& b) {
    a.Swap(&b);
  }
  inline void Swap(Body* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Body* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Body* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Body>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Body& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Body& from) {
    Body::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Body* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nt.search.Body";
  }
  protected:
  explicit Body(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetUinFieldNumber = 1,
    kSettingsFieldNumber = 3,
  };
  // string targetUin = 1;
  void clear_targetuin();
  const std::string& targetuin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetuin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetuin();
  PROTOBUF_NODISCARD std::string* release_targetuin();
  void set_allocated_targetuin(std::string* targetuin);
  private:
  const std::string& _internal_targetuin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetuin(const std::string& value);
  std::string* _internal_mutable_targetuin();
  public:

  // .nt.search.Settings settings = 3;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::nt::search::Settings& settings() const;
  PROTOBUF_NODISCARD ::nt::search::Settings* release_settings();
  ::nt::search::Settings* mutable_settings();
  void set_allocated_settings(::nt::search::Settings* settings);
  private:
  const ::nt::search::Settings& _internal_settings() const;
  ::nt::search::Settings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::nt::search::Settings* settings);
  ::nt::search::Settings* unsafe_arena_release_settings();

  // @@protoc_insertion_point(class_scope:nt.search.Body)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetuin_;
    ::nt::search::Settings* settings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class Settings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nt.search.Settings) */ {
 public:
  inline Settings() : Settings(nullptr) {}
  ~Settings() override;
  explicit PROTOBUF_CONSTEXPR Settings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Settings(const Settings& from);
  Settings(Settings&& from) noexcept
    : Settings() {
    *this = ::std::move(from);
  }

  inline Settings& operator=(const Settings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Settings& operator=(Settings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Settings& default_instance() {
    return *internal_default_instance();
  }
  static inline const Settings* internal_default_instance() {
    return reinterpret_cast<const Settings*>(
               &_Settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Settings& a, Settings& b) {
    a.Swap(&b);
  }
  inline void Swap(Settings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Settings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Settings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Settings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Settings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Settings& from) {
    Settings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Settings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nt.search.Settings";
  }
  protected:
  explicit Settings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiled11FieldNumber = 11,
    kSettingFieldNumber = 55,
    kFiled4FieldNumber = 4,
  };
  // string filed11 = 11;
  void clear_filed11();
  const std::string& filed11() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filed11(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filed11();
  PROTOBUF_NODISCARD std::string* release_filed11();
  void set_allocated_filed11(std::string* filed11);
  private:
  const std::string& _internal_filed11() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filed11(const std::string& value);
  std::string* _internal_mutable_filed11();
  public:

  // string setting = 55;
  void clear_setting();
  const std::string& setting() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_setting(ArgT0&& arg0, ArgT... args);
  std::string* mutable_setting();
  PROTOBUF_NODISCARD std::string* release_setting();
  void set_allocated_setting(std::string* setting);
  private:
  const std::string& _internal_setting() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_setting(const std::string& value);
  std::string* _internal_mutable_setting();
  public:

  // uint32 filed4 = 4;
  void clear_filed4();
  uint32_t filed4() const;
  void set_filed4(uint32_t value);
  private:
  uint32_t _internal_filed4() const;
  void _internal_set_filed4(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:nt.search.Settings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filed11_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setting_;
    uint32_t filed4_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_search_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stranger

// optional int32 command = 1;
inline bool Stranger::_internal_has_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Stranger::has_command() const {
  return _internal_has_command();
}
inline void Stranger::clear_command() {
  _impl_.command_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Stranger::_internal_command() const {
  return _impl_.command_;
}
inline int32_t Stranger::command() const {
  // @@protoc_insertion_point(field_get:nt.search.Stranger.command)
  return _internal_command();
}
inline void Stranger::_internal_set_command(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.command_ = value;
}
inline void Stranger::set_command(int32_t value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:nt.search.Stranger.command)
}

// optional int32 subCommand = 2;
inline bool Stranger::_internal_has_subcommand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Stranger::has_subcommand() const {
  return _internal_has_subcommand();
}
inline void Stranger::clear_subcommand() {
  _impl_.subcommand_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Stranger::_internal_subcommand() const {
  return _impl_.subcommand_;
}
inline int32_t Stranger::subcommand() const {
  // @@protoc_insertion_point(field_get:nt.search.Stranger.subCommand)
  return _internal_subcommand();
}
inline void Stranger::_internal_set_subcommand(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.subcommand_ = value;
}
inline void Stranger::set_subcommand(int32_t value) {
  _internal_set_subcommand(value);
  // @@protoc_insertion_point(field_set:nt.search.Stranger.subCommand)
}

// .nt.search.Body body = 4;
inline bool Stranger::_internal_has_body() const {
  return this != internal_default_instance() && _impl_.body_ != nullptr;
}
inline bool Stranger::has_body() const {
  return _internal_has_body();
}
inline void Stranger::clear_body() {
  if (GetArenaForAllocation() == nullptr && _impl_.body_ != nullptr) {
    delete _impl_.body_;
  }
  _impl_.body_ = nullptr;
}
inline const ::nt::search::Body& Stranger::_internal_body() const {
  const ::nt::search::Body* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::nt::search::Body&>(
      ::nt::search::_Body_default_instance_);
}
inline const ::nt::search::Body& Stranger::body() const {
  // @@protoc_insertion_point(field_get:nt.search.Stranger.body)
  return _internal_body();
}
inline void Stranger::unsafe_arena_set_allocated_body(
    ::nt::search::Body* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nt.search.Stranger.body)
}
inline ::nt::search::Body* Stranger::release_body() {
  
  ::nt::search::Body* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nt::search::Body* Stranger::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:nt.search.Stranger.body)
  
  ::nt::search::Body* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::nt::search::Body* Stranger::_internal_mutable_body() {
  
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::nt::search::Body>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::nt::search::Body* Stranger::mutable_body() {
  ::nt::search::Body* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:nt.search.Stranger.body)
  return _msg;
}
inline void Stranger::set_allocated_body(::nt::search::Body* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:nt.search.Stranger.body)
}

// -------------------------------------------------------------------

// Body

// string targetUin = 1;
inline void Body::clear_targetuin() {
  _impl_.targetuin_.ClearToEmpty();
}
inline const std::string& Body::targetuin() const {
  // @@protoc_insertion_point(field_get:nt.search.Body.targetUin)
  return _internal_targetuin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Body::set_targetuin(ArgT0&& arg0, ArgT... args) {
 
 _impl_.targetuin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt.search.Body.targetUin)
}
inline std::string* Body::mutable_targetuin() {
  std::string* _s = _internal_mutable_targetuin();
  // @@protoc_insertion_point(field_mutable:nt.search.Body.targetUin)
  return _s;
}
inline const std::string& Body::_internal_targetuin() const {
  return _impl_.targetuin_.Get();
}
inline void Body::_internal_set_targetuin(const std::string& value) {
  
  _impl_.targetuin_.Set(value, GetArenaForAllocation());
}
inline std::string* Body::_internal_mutable_targetuin() {
  
  return _impl_.targetuin_.Mutable(GetArenaForAllocation());
}
inline std::string* Body::release_targetuin() {
  // @@protoc_insertion_point(field_release:nt.search.Body.targetUin)
  return _impl_.targetuin_.Release();
}
inline void Body::set_allocated_targetuin(std::string* targetuin) {
  if (targetuin != nullptr) {
    
  } else {
    
  }
  _impl_.targetuin_.SetAllocated(targetuin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.targetuin_.IsDefault()) {
    _impl_.targetuin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt.search.Body.targetUin)
}

// .nt.search.Settings settings = 3;
inline bool Body::_internal_has_settings() const {
  return this != internal_default_instance() && _impl_.settings_ != nullptr;
}
inline bool Body::has_settings() const {
  return _internal_has_settings();
}
inline void Body::clear_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.settings_ != nullptr) {
    delete _impl_.settings_;
  }
  _impl_.settings_ = nullptr;
}
inline const ::nt::search::Settings& Body::_internal_settings() const {
  const ::nt::search::Settings* p = _impl_.settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::nt::search::Settings&>(
      ::nt::search::_Settings_default_instance_);
}
inline const ::nt::search::Settings& Body::settings() const {
  // @@protoc_insertion_point(field_get:nt.search.Body.settings)
  return _internal_settings();
}
inline void Body::unsafe_arena_set_allocated_settings(
    ::nt::search::Settings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settings_);
  }
  _impl_.settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nt.search.Body.settings)
}
inline ::nt::search::Settings* Body::release_settings() {
  
  ::nt::search::Settings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nt::search::Settings* Body::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:nt.search.Body.settings)
  
  ::nt::search::Settings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
  return temp;
}
inline ::nt::search::Settings* Body::_internal_mutable_settings() {
  
  if (_impl_.settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::nt::search::Settings>(GetArenaForAllocation());
    _impl_.settings_ = p;
  }
  return _impl_.settings_;
}
inline ::nt::search::Settings* Body::mutable_settings() {
  ::nt::search::Settings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:nt.search.Body.settings)
  return _msg;
}
inline void Body::set_allocated_settings(::nt::search::Settings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:nt.search.Body.settings)
}

// -------------------------------------------------------------------

// Settings

// uint32 filed4 = 4;
inline void Settings::clear_filed4() {
  _impl_.filed4_ = 0u;
}
inline uint32_t Settings::_internal_filed4() const {
  return _impl_.filed4_;
}
inline uint32_t Settings::filed4() const {
  // @@protoc_insertion_point(field_get:nt.search.Settings.filed4)
  return _internal_filed4();
}
inline void Settings::_internal_set_filed4(uint32_t value) {
  
  _impl_.filed4_ = value;
}
inline void Settings::set_filed4(uint32_t value) {
  _internal_set_filed4(value);
  // @@protoc_insertion_point(field_set:nt.search.Settings.filed4)
}

// string filed11 = 11;
inline void Settings::clear_filed11() {
  _impl_.filed11_.ClearToEmpty();
}
inline const std::string& Settings::filed11() const {
  // @@protoc_insertion_point(field_get:nt.search.Settings.filed11)
  return _internal_filed11();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Settings::set_filed11(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filed11_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt.search.Settings.filed11)
}
inline std::string* Settings::mutable_filed11() {
  std::string* _s = _internal_mutable_filed11();
  // @@protoc_insertion_point(field_mutable:nt.search.Settings.filed11)
  return _s;
}
inline const std::string& Settings::_internal_filed11() const {
  return _impl_.filed11_.Get();
}
inline void Settings::_internal_set_filed11(const std::string& value) {
  
  _impl_.filed11_.Set(value, GetArenaForAllocation());
}
inline std::string* Settings::_internal_mutable_filed11() {
  
  return _impl_.filed11_.Mutable(GetArenaForAllocation());
}
inline std::string* Settings::release_filed11() {
  // @@protoc_insertion_point(field_release:nt.search.Settings.filed11)
  return _impl_.filed11_.Release();
}
inline void Settings::set_allocated_filed11(std::string* filed11) {
  if (filed11 != nullptr) {
    
  } else {
    
  }
  _impl_.filed11_.SetAllocated(filed11, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filed11_.IsDefault()) {
    _impl_.filed11_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt.search.Settings.filed11)
}

// string setting = 55;
inline void Settings::clear_setting() {
  _impl_.setting_.ClearToEmpty();
}
inline const std::string& Settings::setting() const {
  // @@protoc_insertion_point(field_get:nt.search.Settings.setting)
  return _internal_setting();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Settings::set_setting(ArgT0&& arg0, ArgT... args) {
 
 _impl_.setting_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nt.search.Settings.setting)
}
inline std::string* Settings::mutable_setting() {
  std::string* _s = _internal_mutable_setting();
  // @@protoc_insertion_point(field_mutable:nt.search.Settings.setting)
  return _s;
}
inline const std::string& Settings::_internal_setting() const {
  return _impl_.setting_.Get();
}
inline void Settings::_internal_set_setting(const std::string& value) {
  
  _impl_.setting_.Set(value, GetArenaForAllocation());
}
inline std::string* Settings::_internal_mutable_setting() {
  
  return _impl_.setting_.Mutable(GetArenaForAllocation());
}
inline std::string* Settings::release_setting() {
  // @@protoc_insertion_point(field_release:nt.search.Settings.setting)
  return _impl_.setting_.Release();
}
inline void Settings::set_allocated_setting(std::string* setting) {
  if (setting != nullptr) {
    
  } else {
    
  }
  _impl_.setting_.SetAllocated(setting, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.setting_.IsDefault()) {
    _impl_.setting_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nt.search.Settings.setting)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace search
}  // namespace nt

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_search_2eproto
